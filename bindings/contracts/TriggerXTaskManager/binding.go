// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractTriggerXTaskManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IBLSSignatureCheckerNonSignerStakesAndSignature is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerNonSignerStakesAndSignature struct {
	NonSignerQuorumBitmapIndices []uint32
	NonSignerPubkeys             []BN254G1Point
	QuorumApks                   []BN254G1Point
	ApkG2                        BN254G2Point
	Sigma                        BN254G1Point
	QuorumApkIndices             []uint32
	TotalStakeIndices            []uint32
	NonSignerStakeIndices        [][]uint32
}

// IBLSSignatureCheckerQuorumStakeTotals is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerQuorumStakeTotals struct {
	SignedStakeForQuorum []*big.Int
	TotalStakeForQuorum  []*big.Int
}

// ITriggerXTaskManagerTask is an auto generated low-level Go binding around an user-defined struct.
type ITriggerXTaskManagerTask struct {
	JobId            uint32
	TaskNum          uint32
	TaskCreatedBlock uint32
	QuorumNumbers    []byte
	QuorumThreshold  uint8
}

// ITriggerXTaskManagerTaskResponse is an auto generated low-level Go binding around an user-defined struct.
type ITriggerXTaskManagerTaskResponse struct {
	TaskId           [8]byte
	TaskResponseHash [32]byte
}

// ContractTriggerXTaskManagerMetaData contains all meta data concerning the ContractTriggerXTaskManager contract.
var ContractTriggerXTaskManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIRegistryCoordinator\",\"name\":\"_registryCoordinator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIPauserRegistry\",\"name\":\"pauserRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractIPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"PauserRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"StaleStakesForbiddenUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"taskId\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"taskId\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskResponseHash\",\"type\":\"bytes32\"}],\"name\":\"TaskResponded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TASK_RESPONSE_WINDOW_BLOCK\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blsApkRegistry\",\"outputs\":[{\"internalType\":\"contractIBLSApkRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"referenceBlockNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point[]\",\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point[]\",\"name\":\"quorumApks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"structBN254.G2Point\",\"name\":\"apkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"sigma\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[][]\",\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\"}],\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"checkSignatures\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96[]\",\"name\":\"signedStakeForQuorum\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"totalStakeForQuorum\",\"type\":\"uint96[]\"}],\"internalType\":\"structIBLSSignatureChecker.QuorumStakeTotals\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"jobId\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"quorumThreshold\",\"type\":\"uint8\"}],\"name\":\"createNewTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"contractIDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"jobId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taskNum\",\"type\":\"uint32\"}],\"name\":\"generateTaskId\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_taskResponseWindowBlock\",\"type\":\"uint32\"},{\"internalType\":\"contractITriggerXServiceManager\",\"name\":\"_serviceManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"jobToTaskCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserRegistry\",\"outputs\":[{\"internalType\":\"contractIPauserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryCoordinator\",\"outputs\":[{\"internalType\":\"contractIRegistryCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"jobId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taskNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taskCreatedBlock\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"quorumThreshold\",\"type\":\"uint8\"}],\"internalType\":\"structITriggerXTaskManager.Task\",\"name\":\"task\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes8\",\"name\":\"taskId\",\"type\":\"bytes8\"},{\"internalType\":\"bytes32\",\"name\":\"taskResponseHash\",\"type\":\"bytes32\"}],\"internalType\":\"structITriggerXTaskManager.TaskResponse\",\"name\":\"taskResponse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point[]\",\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point[]\",\"name\":\"quorumApks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"structBN254.G2Point\",\"name\":\"apkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"sigma\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[][]\",\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\"}],\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"name\":\"nonSignerStakesAndSignature\",\"type\":\"tuple\"}],\"name\":\"respondToTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceManager\",\"outputs\":[{\"internalType\":\"contractITriggerXServiceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"setPauserRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setStaleStakesForbidden\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"contractIStakeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staleStakesForbidden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"name\":\"taskHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"name\":\"taskResponseHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"apk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"structBN254.G2Point\",\"name\":\"apkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"sigma\",\"type\":\"tuple\"}],\"name\":\"trySignatureAndApkVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pairingSuccessful\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"siganatureIsValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serviceManager\",\"type\":\"address\"}],\"name\":\"updateServiceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052600436101561001257600080fd5b60003560e01c806310d67a2f146101d7578063136439dd146101d2578063171f1d5b146101cd5780631ad43189146101c8578063304feba2146101c35780633998fdd3146101be578063416c7e5e146101b9578063595c6a67146101b45780635ac86ab7146101af5780635c975abb146101aa5780635df45946146101a55780636566ba20146101a0578063683048351461019b5780636d14a987146101965780636efb463614610191578063715018a61461018c5780637d847d1b14610187578063886f1195146101825780638da5cb5b1461017d5780638e91269d146101785780639f2d70df14610173578063b98d09081461016e578063bdf3199114610169578063c1554a4b14610164578063d82c7b5c1461015f578063df5cf7231461015a578063f2fde38b146101555763fabc1cbc1461015057600080fd5b611306565b611275565b611230565b6111ef565b6110e8565b611080565b61105d565b61101c565b610fd5565b610fac565b610f83565b610f3c565b610edf565b610e32565b610b3c565b610af7565b6109e7565b610967565b610949565b610916565b610881565b61074d565b61071a565b6106d9565b6106a3565b61063b565b610377565b6101f2565b6001600160a01b038116036101ed57565b600080fd5b346101ed5760203660031901126101ed5760043561020f816101dc565b60655460405163755b36bd60e11b81529091906020816004816001600160a01b0387165afa80156103725761025791600091610343575b506001600160a01b03163314611439565b6001600160a01b038116156102c657604080516001600160a01b03938416815292821660208401526102c4927f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb69190a160018060a01b03166001600160601b0360a01b6065541617606555565b005b60405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a490fd5b610365915060203d60201161036b575b61035d81836104e8565b810190611415565b38610246565b503d610353565b61142d565b346101ed5760203660031901126101ed5760043560655460405163237dfb4760e11b815233600482015290602090829060249082906001600160a01b03165afa8015610372576103cf91600091610483575b506114ad565b6066548181160361041857806066557fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d604051806104133394829190602083019252565b0390a2005b60405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c69747900000000000000006064820152608490fd5b6104a5915060203d6020116104ab575b61049d81836104e8565b810190611498565b386103c9565b503d610493565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176104e357604052565b6104b2565b90601f801991011681019081106001600160401b038211176104e357604052565b60405190610519610100836104e8565b565b604051906105196040836104e8565b9061051960405192836104e8565b60409060e31901126101ed5760405190610551826104c8565b60e4358252610104356020830152565b91908260409103126101ed57604051610579816104c8565b6020808294803584520135910152565b9080601f830112156101ed5760408051926105a482856104e8565b839181019283116101ed57905b8282106105be5750505090565b81358152602091820191016105b1565b9060806063198301126101ed576040516105e7816104c8565b602061060282946105f9816064610589565b845260a4610589565b910152565b91906080838203126101ed57602061060260405192610625846104c8565b604084966106338382610589565b865201610589565b346101ed576101203660031901126101ed5760043560403660231901126101ed57610693604091825161066d816104c8565b60243581526044356020820152610683366105ce565b9061068d36610538565b9261154c565b8251911515825215156020820152f35b346101ed5760003660031901126101ed57602063ffffffff60c95416604051908152f35b6001600160c01b03198116036101ed57565b346101ed5760203660031901126101ed576004356106f6816106c7565b6001600160401b0360c01b1660005260cb6020526020604060002054604051908152f35b346101ed5760003660031901126101ed5760cd546040516001600160a01b039091168152602090f35b801515036101ed57565b346101ed5760203660031901126101ed5760043561076a81610743565b604051638da5cb5b60e01b81526020816004817f000000000000000000000000ab42fae90d4ac5df10bc069b132203ef566acc596001600160a01b03165afa90811561037257600091610862575b506001600160a01b031633036107d1576102c4906130df565b60405162461bcd60e51b815260206004820152605c60248201527f424c535369676e6174757265436865636b65722e6f6e6c79436f6f7264696e6160448201527f746f724f776e65723a2063616c6c6572206973206e6f7420746865206f776e6560648201527f72206f6620746865207265676973747279436f6f7264696e61746f7200000000608482015260a490fd5b61087b915060203d60201161036b5761035d81836104e8565b386107b8565b346101ed5760003660031901126101ed5760655460405163237dfb4760e11b815233600482015290602090829060249082906001600160a01b03165afa8015610372576108d59160009161048357506114ad565b60001960665560405160001981527fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d60203392a2005b60ff8116036101ed57565b346101ed5760203660031901126101ed576020600160ff6004356109398161090b565b161b806066541614604051908152f35b346101ed5760003660031901126101ed576020606654604051908152f35b346101ed5760003660031901126101ed576040517f000000000000000000000000855b96fbf39b92acea95a5f2a9fa5b016f53e4a86001600160a01b03168152602090f35b63ffffffff8116036101ed57565b9181601f840112156101ed578235916001600160401b0383116101ed57602083818601950101116101ed57565b346101ed5760603660031901126101ed57600435610a04816109ac565b6024356001600160401b0381116101ed57610a239036906004016109ba565b60443591610a308361090b565b60cd54604051635285320760e11b815290602090829060049082906001600160a01b03165afa90811561037257600091610ad8575b506001600160a01b03163303610a7e576102c49361177e565b60405162461bcd60e51b815260206004820152602c60248201527f4f6e6c7920746865207461736b206d616e616765722063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b6064820152608490fd5b610af1915060203d60201161036b5761035d81836104e8565b38610a65565b346101ed5760003660031901126101ed576040517f000000000000000000000000ff6de6ea349e8b59aca720eb3fbb2c6552e266e06001600160a01b03168152602090f35b346101ed5760003660031901126101ed576040517f000000000000000000000000ab42fae90d4ac5df10bc069b132203ef566acc596001600160a01b03168152602090f35b6001600160401b0381116104e35760051b60200190565b9080601f830112156101ed578135610baf81610b81565b92610bbd60405194856104e8565b81845260208085019260051b8201019283116101ed57602001905b828210610be55750505090565b602080918335610bf4816109ac565b815201910190610bd8565b81601f820112156101ed578035610c1581610b81565b92610c2360405194856104e8565b81845260208085019260061b840101928184116101ed57602001915b838310610c4d575050505090565b6020604091610c5c8486610561565b815201920191610c3f565b9080601f830112156101ed578135610c7e81610b81565b92610c8c60405194856104e8565b81845260208085019260051b820101918383116101ed5760208201905b838210610cb857505050505090565b81356001600160401b0381116101ed57602091610cda87848094880101610b98565b815201910190610ca9565b919091610180818403126101ed57610cfb610509565b9281356001600160401b0381116101ed5781610d18918401610b98565b845260208201356001600160401b0381116101ed5781610d39918401610bff565b602085015260408201356001600160401b0381116101ed5781610d5d918401610bff565b6040850152610d6f8160608401610607565b6060850152610d818160e08401610561565b60808501526101208201356001600160401b0381116101ed5781610da6918401610b98565b60a08501526101408201356001600160401b0381116101ed5781610dcb918401610b98565b60c08501526101608201356001600160401b0381116101ed57610dee9201610c67565b60e0830152565b906020808351928381520192019060005b818110610e135750505090565b82516001600160601b0316845260209384019390920191600101610e06565b346101ed5760803660031901126101ed576004356024356001600160401b0381116101ed57610e659036906004016109ba565b9091604435610e73816109ac565b606435926001600160401b0384116101ed57610ed594610e9a610ea0953690600401610ce5565b93611e7c565b604051928392604084526020610ec182516040808801526080870190610df5565b910151848203603f19016060860152610df5565b9060208301520390f35b346101ed5760003660031901126101ed57610ef861334a565b603380546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101ed5760203660031901126101ed57600435610f59816101dc565b610f6161334a565b60cd80546001600160a01b0319166001600160a01b0392909216919091179055005b346101ed5760003660031901126101ed576065546040516001600160a01b039091168152602090f35b346101ed5760003660031901126101ed576033546040516001600160a01b039091168152602090f35b346101ed5760403660031901126101ed576020611009600435610ff7816109ac565b60243590611004826109ac565b612786565b6040516001600160c01b03199091168152f35b346101ed5760203660031901126101ed5763ffffffff60043561103e816109ac565b1660005260ca602052602063ffffffff60406000205416604051908152f35b346101ed5760003660031901126101ed57602060ff609754166040519015158152f35b346101ed5760803660031901126101ed576004356001600160401b0381116101ed5760a060031982360301126101ed5760403660231901126101ed57606435906001600160401b0382116101ed576110df6102c4923690600401610ce5565b906004016127f4565b346101ed5760603660031901126101ed57600435611105816101dc565b611163602435611114816109ac565b60443590611121826101dc565b6000549361114760ff600887901c1615809681976111e1575b81156111c1575b50612ba4565b8461115a600160ff196000541617600055565b6111a857612c07565b61116957005b61117961ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6111bc61010061ff00196000541617600055565b612c07565b303b159150816111d3575b5038611141565b60ff166001149050386111cc565b600160ff821610915061113a565b346101ed5760203660031901126101ed5760043561120c816106c7565b6001600160401b0360c01b1660005260cc6020526020604060002054604051908152f35b346101ed5760003660031901126101ed576040517f000000000000000000000000a44151489861fe9e3055d95adc98fbd462b948e76001600160a01b03168152602090f35b346101ed5760203660031901126101ed57600435611292816101dc565b61129a61334a565b6001600160a01b038116156112b2576102c4906133a2565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346101ed5760203660031901126101ed5760655460405163755b36bd60e11b81526004803592602091839182906001600160a01b03165afa8015610372576113609160009161034357506001600160a01b03163314611439565b6066541981198116036113aa5761137681606655565b60405190815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c908060208101610413565b60405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c69747900000000000000006064820152608490fd5b908160209103126101ed575161142a816101dc565b90565b6040513d6000823e3d90fd5b1561144057565b60405162461bcd60e51b815260206004820152602a60248201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160448201526939903ab73830bab9b2b960b11b6064820152608490fd5b908160209103126101ed575161142a81610743565b156114b457565b60405162461bcd60e51b815260206004820152602860248201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160448201526739903830bab9b2b960c11b6064820152608490fd5b634e487b7160e01b600052603260045260246000fd5b9060028110156115315760051b0190565b61150a565b634e487b7160e01b600052601260045260246000fd5b61162861160561162e956115ff6115f885875160208901518a515160208c51015160208d016020815151915101519189519360208b0151956040519760208901998a5260208a015260408901526060880152608087015260a086015260c085015260e08401526101008301526115cf81610120840103601f1981018352826104e8565b5190207f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001900690565b8096612c81565b90612cc9565b926115ff61161a611614612d53565b94612e4a565b91611623612f71565b612c81565b91612fa5565b9091565b6040519060a082018281106001600160401b038211176104e35760405260006080838281528260208201528260408201526060808201520152565b9291926001600160401b0382116104e35760405191611696601f8201601f1916602001846104e8565b8294818452818301116101ed578281602093846000960137010152565b9190916020815263ffffffff835116602082015263ffffffff602084015116604082015263ffffffff604084015116606082015260608301519260a060808301528351908160c084015260005b828110611735575060e09394506080611729916000868587010152015160a084019060ff169052565b601f01601f1916010190565b80602080928801015160e0828701015201611700565b634e487b7160e01b600052601160045260246000fd5b63ffffffff60019116019063ffffffff821161177957565b61174b565b91611816610519946118077fabfb3a7c31b577bfadcbc582547c97e20e11cb2223dd8617bf0e283607cad8ad946117b3611632565b63ffffffff88168152946117f46117e76117dd8a63ffffffff1660005260ca602052604060002090565b5463ffffffff1690565b63ffffffff166020880152565b4363ffffffff166040870152369161166d565b606084015260ff166080830152565b61183c6118366117dd8563ffffffff1660005260ca602052604060002090565b84612786565b90604051611860816118526020820194856116b3565b03601f1981018352826104e8565b5190206001600160c01b031991909116600081815260cb60209081526040918290208490558151928352820192909252a16118d06118b96118b46117dd8463ffffffff1660005260ca602052604060002090565b611761565b9163ffffffff1660005260ca602052604060002090565b9063ffffffff1663ffffffff19825416179055565b604051906118f2826104c8565b60606020838281520152565b1561190557565b60405162461bcd60e51b815260206004820152603760248201526000805160206135ee83398151915260448201527f7265733a20656d7074792071756f72756d20696e7075740000000000000000006064820152608490fd5b1561196557565b60405162461bcd60e51b815260206004820152604160248201526000805160206135ee83398151915260448201527f7265733a20696e7075742071756f72756d206c656e677468206d69736d6174636064820152600d60fb1b608482015260a490fd5b156119cf57565b60a460405162461bcd60e51b815260206004820152604460248201526000805160206135ee83398151915260448201527f7265733a20696e707574206e6f6e7369676e6572206c656e677468206d69736d6064820152630c2e8c6d60e31b6084820152fd5b15611a3b57565b60405162461bcd60e51b815260206004820152603c60248201526000805160206135ee83398151915260448201527f7265733a20696e76616c6964207265666572656e636520626c6f636b000000006064820152608490fd5b90611a9e82610b81565b611aab60405191826104e8565b8281528092611abc601f1991610b81565b0190602036910137565b908160209103126101ed575161142a8161090b565b80518210156115315760209160051b010190565b60001981019190821161177957565b15611b0557565b608460405162461bcd60e51b815260206004820152604060248201526000805160206135ee83398151915260448201527f7265733a206e6f6e5369676e65725075626b657973206e6f7420736f727465646064820152fd5b908160209103126101ed57516001600160c01b03811681036101ed5790565b908160209103126101ed575190565b90821015611531570190565b906001820180921161177957565b906002820180921161177957565b906003820180921161177957565b906004820180921161177957565b906005820180921161177957565b9190820180921161177957565b15611bf157565b60405162461bcd60e51b815260206004820152606660248201526000805160206135ee83398151915260448201527f7265733a205374616b6552656769737472792075706461746573206d7573742060648201527f62652077697468696e207769746864726177616c44656c6179426c6f636b732060848201526577696e646f7760d01b60a482015260c490fd5b908160209103126101ed575167ffffffffffffffff19811681036101ed5790565b15611ca757565b60405162461bcd60e51b815260206004820152606160248201526000805160206135ee83398151915260448201527f7265733a2071756f72756d41706b206861736820696e2073746f72616765206460648201527f6f6573206e6f74206d617463682070726f76696465642071756f72756d2061706084820152606b60f81b60a482015260c490fd5b908160209103126101ed57516001600160601b03811681036101ed5790565b906001600160601b03809116911603906001600160601b03821161177957565b15611d7657565b60405162461bcd60e51b815260206004820152604360248201526000805160206135ee83398151915260448201527f7265733a2070616972696e6720707265636f6d70696c652063616c6c206661696064820152621b195960ea1b608482015260a490fd5b15611de257565b60405162461bcd60e51b815260206004820152603960248201526000805160206135ee83398151915260448201527f7265733a207369676e617475726520697320696e76616c6964000000000000006064820152608490fd5b60049163ffffffff60e01b9060e01b16815201602082519192019060005b818110611e665750505090565b8251845260209384019390920191600101611e59565b949392909193611e8a6118e5565b50611e968515156118fe565b604084015151851480612778575b8061276a575b8061275c575b611eb99061195e565b611ecb602085015151855151146119c8565b611ee263ffffffff431663ffffffff841610611a34565b611eea61051b565b600081526000602082015292611efe6118e5565b611f0787611a94565b6020820152611f1587611a94565b8152611f1f6118e5565b92611f2e602088015151611a94565b8452611f3e602088015151611a94565b602085810191909152604051639aa1653d60e01b815290816004817f000000000000000000000000ab42fae90d4ac5df10bc069b132203ef566acc596001600160a01b03165afa801561037257611fa89160009161272d575b50611fa3368b8761166d565b61311d565b986000965b602089015180518910156121385760208861201c6120128c61200a8f96868e611fef611fda868095611adb565b51805160005260200151602052604060002090565b611ffc8484840151611adb565b5282612105575b0151611adb565b519551611adb565b5163ffffffff1690565b6040516304ec635160e01b8152600481019490945263ffffffff9182166024850152166044830152816064816001600160a01b037f000000000000000000000000ab42fae90d4ac5df10bc069b132203ef566acc59165afa918215610372576115ff8a6120ca8f6120c38f8460208f926120ba936120b28460019e6120d09e6000916120d8575b508f8060c01b03169251611adb565b520151611adb565b51938d51611adb565b51166131a4565b906131d7565b970196611fad565b6120f89150863d81116120fe575b6120f081836104e8565b810190611b5d565b386120a3565b503d6120e6565b6121336121158484840151611adb565b5161212c8484015161212687611aef565b90611adb565b5110611afe565b612003565b5090959794965061214d9198939299506132c0565b9161215a60975460ff1690565b908115612724576040516318891fd760e31b81526020816004817f000000000000000000000000a44151489861fe9e3055d95adc98fbd462b948e76001600160a01b03165afa90811561037257600091612705575b5091905b6000925b81841061220d575050505050926121f46121ef6121e86122079585611852986080606060209901519201519261154c565b9190611d6f565b611ddb565b0151604051928391602083019586611e3b565b51902090565b92989596909399919794878b888c888d6125f1575b6120128260a06122766122706122628461227e9761225c61224e611fda8f9c604060209f9e0151611adb565b67ffffffffffffffff191690565b9b611b8b565b356001600160f81b03191690565b60f81c90565b970151611adb565b604051631a2f32ab60e21b815260ff95909516600486015263ffffffff9182166024860152166044840152826064816001600160a01b037f000000000000000000000000855b96fbf39b92acea95a5f2a9fa5b016f53e4a8165afa908115610372576123436120128f958f9061233b8f978f96848f61233560c09661232e848f60209f90612003612262996040936122709c6000916125c3575b5067ffffffffffffffff19918216911614611ca0565b5190612cc9565b9c611b8b565b960151611adb565b604051636414a62b60e11b815260ff94909416600485015263ffffffff9182166024850152166044830152816064816001600160a01b037f000000000000000000000000ff6de6ea349e8b59aca720eb3fbb2c6552e266e0165afa908115610372576123d1918c8f9260009261259f575b5060206123c392930151611adb565b906001600160601b03169052565b6123fe8c6123c38c6123f76123ea826020860151611adb565b516001600160601b031690565b9251611adb565b600098895b60208a015151811015612586578b8d61244189612434612270612262868f8961242c9151611adb565b519487611b8b565b60ff161c60019081161490565b612450575b5050600101612403565b8a8a6124d8859f948f96866124928f9360e0612489612012956020612481612270612262839f6124989c8991611b8b565b9a0151611adb565b519b0151611adb565b51611adb565b60405163795f4a5760e11b815260ff909316600484015263ffffffff93841660248401526044830196909652919094166064850152839081906084820190565b03817f000000000000000000000000ff6de6ea349e8b59aca720eb3fbb2c6552e266e06001600160a01b03165afa908115610372578f612545908f93600195948695600092612550575b5061253f6123c39293519361253a6123ea8487611adb565b611d4f565b92611adb565b019a90508b8d612446565b6123c3925061257861253f9160203d811161257f575b61257081836104e8565b810190611d30565b9250612522565b503d612566565b5093919796996001919699509a94929a019291906121b7565b6123c392506125bc602091823d811161257f5761257081836104e8565b92506123b4565b60206125e492503d81116125ea575b6125dc81836104e8565b810190611c7f565b38612318565b503d6125d2565b61262e945061260b92506122709161226291602095611b8b565b60405163124d062160e11b815260ff909116600482015291829081906024820190565b03817f000000000000000000000000ab42fae90d4ac5df10bc069b132203ef566acc596001600160a01b03165afa80156103725760208961227e8f938f60a08f976122706122628f8f9061225c61224e611fda8f60408b96918f6126b6906120129f8a956122769e6000926126cc575b5063ffffffff6126b092931692611bdd565b11611bea565b5050505050509750505050505092935050612222565b60206126b0935063ffffffff916126f7913d81116126fe575b6126ef81836104e8565b810190611b7c565b925061269e565b503d6126e5565b61271e915060203d6020116126fe576126ef81836104e8565b386121af565b600091906121b3565b61274f915060203d602011612755575b61274781836104e8565b810190611ac6565b38611f97565b503d61273d565b5060e0840151518514611eb0565b5060c0840151518514611eaa565b5060a0840151518514611ea4565b6040516001600160e01b031960e092831b8116602083019081529390921b9091166024820152600881526127bb6028826104e8565b5190516001600160c01b031981169190600882106127d857505090565b6001600160c01b031960089290920360031b82901b1616919050565b60cd54604051633f4e3b2360e21b815291929190602090829060049082906001600160a01b03165afa908115610372576000916128a3575b506001600160a01b0316330361284757602461051992612a2e565b60405162461bcd60e51b815260206004820152602e60248201527f4f6e6c7920746865207461736b2076616c696461746f722063616e2063616c6c60448201526d103a3434b990333ab731ba34b7b760911b6064820152608490fd5b6128bc915060203d60201161036b5761035d81836104e8565b3861282c565b6020809180356128d1816106c7565b6001600160c01b03191684520135910152565b60408101929161051991906128c2565b903590601e19813603018212156101ed57018035906001600160401b0382116101ed576020019181360383136101ed57565b3561142a816109ac565b9060648202918083046064149015171561177957565b9060068202918083046006149015171561177957565b3561142a8161090b565b906001600160601b03809116911602906001600160601b03821691820361177957565b1561299057565b608460405162461bcd60e51b815260206004820152604060248201527f5369676e61746f7269657320646f206e6f74206f776e206174206c656173742060448201527f7468726573686f6c642070657263656e74616765206f6620612071756f72756d6064820152fd5b9092916020606091612a108460808101976128c2565b63ffffffff81511660408501520151910152565b3561142a816106c7565b612a6d6040516020810190612a478161185287856128e4565b519020936060830194612a5a86856128f4565b90612a6760408701612926565b92611e7c565b60009391935b612a7d86856128f4565b9050811015612aee57600181612ae687612adf612ab3612ac46123ea86602061233b612abf612ab36123ea612a7d9e8b51611adb565b6001600160601b031690565b612930565b612ad9612ad360808d0161295c565b60ff1690565b90612966565b1115612989565b019050612a73565b50915091507f1d628bde448f73744b15323b0741929628bf470841cbcff2e6589437eb1dde3f9250612b1e61051b565b4363ffffffff168152906020820152604051612b4381611852602082019486866129fa565b519020612b6e612b5283612a24565b6001600160401b0360c01b1660005260cc602052604060002090565b55612b84612b52612b7e83612a24565b92612a24565b54604080516001600160c01b0319939093168352602083019190915290a1565b15612bab57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b90612c1663ffffffff926133a2565b1663ffffffff1960c954161760c95560018060a01b03166001600160601b0360a01b60cd54161760cd55565b60405190612c4f826104c8565b60006020838281520152565b60405190610180612c6c81846104e8565b368337565b604051906020612c6c81846104e8565b604090929192612c8f612c42565b9384916060916020855192612ca485856104e8565b8436853780518452015160208301528482015260076107cf195a01fa15612cc757565bfe5b604090929192612cd7612c42565b938491602060809281865193612ced86866104e8565b85368637805185520151828401528051868401520151606082015260066107cf195a01fa8015612cc75715612d1e57565b60405162461bcd60e51b815260206004820152600d60248201526c1958cb5859190b59985a5b1959609a1b6044820152606490fd5b604051612d5f816104c8565b6040908151612d6e83826104e8565b8236823781526020825191612d8384846104e8565b8336843701528051612d9582826104e8565b7f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6020820152815190612deb83836104e8565b7f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6020830152612e40835193846104e8565b8252602082015290565b6000805160206135ce83398151915290612e62612c42565b5006906000908192602060c0945b612f6c576000936000805160206135ce83398151915260038185818180090908604051612e9d84826104e8565b83368237838189604051612eb182826104e8565b813682378381528360208201528360408201528560608201527f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f5260808201526000805160206135ce83398151915260a082015260056107cf195a01fa8015612cc757612f1c90613581565b5191612f6c576000805160206135ce83398151915282800914612f5557506000805160206135ce83398151915260018593089193612e70565b929450909250612f6361051b565b92835282015290565b611536565b612f79612c42565b50604051612f86816104c8565b600181526002602082015290565b90600c8110156115315760051b0190565b93929091612fb3604061052a565b9485526020850152612fc5604061052a565b9182526020820152612fd5612c5b565b9260005b6002811061300357505050602061018092612ff2612c71565b93849160086201d4c0fa9151151590565b8061300f600192612946565b6130198285611520565b5151600090613028838a612f94565b5260206130358487611520565b51015161304a61304484611b97565b8a612f94565b526130558387611520565b51515161306461304484611ba5565b5261307a6130728488611520565b515160200190565b5161308761304484611bb3565b5260206130948488611520565b5101519050516130ac6130a683611bc1565b89612f94565b526130d86130d26130cb60206130c2868a611520565b51015160200190565b5192611bcf565b88612f94565b5201612fd9565b60207f40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc91151560ff196097541660ff821617609755604051908152a1565b90600161312b60ff9361348b565b928392161b11156131395790565b60405162461bcd60e51b815260206004820152603f60248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206269746d61702065786365656473206d61782076616c7565006064820152608490fd5b806000915b6131b1575090565b60001981018181116117795761ffff9116911661ffff81146117795760010190806131a9565b906131e0612c42565b5061ffff81169061020082101561328857600182146132835761320161051b565b600081526000602082015292906001906000925b61ffff831685101561322957505050505090565b600161ffff831660ff86161c811614613263575b600161325961324e8360ff94612cc9565b9460011b61fffe1690565b9401169291613215565b94600161325961324e6132788960ff95612cc9565b98935050505061323d565b505090565b60405162461bcd60e51b815260206004820152601060248201526f7363616c61722d746f6f2d6c6172676560801b6044820152606490fd5b6132c8612c42565b5080519081158061333e575b156132f75750506040516132e96040826104e8565b600081526000602082015290565b60206000805160206135ce833981519152910151066000805160206135ce833981519152036000805160206135ce83398151915281116117795760405191612e40836104c8565b506020810151156132d4565b6033546001600160a01b0316330361335e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b8051156115315760200190565b908151811015611531570160200190565b1561341057565b60405162461bcd60e51b815260206004820152604760248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206f72646572656442797465734172726179206973206e6f74206064820152661bdc99195c995960ca1b608482015260a490fd5b9061010082511161350a57815115613504576134c76134bd6122706134af856133eb565b516001600160f81b03191690565b60ff600191161b90565b6001905b83518210156134ff576001906134ea6134bd6122706134af86896133f8565b906134f6818311613409565b179101906134cb565b925050565b60009150565b60a460405162461bcd60e51b815260206004820152604460248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206f7264657265644279746573417272617920697320746f6f206064820152636c6f6e6760e01b6084820152fd5b1561358857565b60405162461bcd60e51b815260206004820152601a60248201527f424e3235342e6578704d6f643a2063616c6c206661696c7572650000000000006044820152606490fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47424c535369676e6174757265436865636b65722e636865636b5369676e617475a264697066735822122079f2d3957a76edb0fd53061e7d72ff342679a893199052b48e8d3559651288db64736f6c634300081b0033",
}

// ContractTriggerXTaskManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractTriggerXTaskManagerMetaData.ABI instead.
var ContractTriggerXTaskManagerABI = ContractTriggerXTaskManagerMetaData.ABI

// ContractTriggerXTaskManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractTriggerXTaskManagerMetaData.Bin instead.
var ContractTriggerXTaskManagerBin = ContractTriggerXTaskManagerMetaData.Bin

// DeployContractTriggerXTaskManager deploys a new Ethereum contract, binding an instance of ContractTriggerXTaskManager to it.
func DeployContractTriggerXTaskManager(auth *bind.TransactOpts, backend bind.ContractBackend, _registryCoordinator common.Address) (common.Address, *types.Transaction, *ContractTriggerXTaskManager, error) {
	parsed, err := ContractTriggerXTaskManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractTriggerXTaskManagerBin), backend, _registryCoordinator)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractTriggerXTaskManager{ContractTriggerXTaskManagerCaller: ContractTriggerXTaskManagerCaller{contract: contract}, ContractTriggerXTaskManagerTransactor: ContractTriggerXTaskManagerTransactor{contract: contract}, ContractTriggerXTaskManagerFilterer: ContractTriggerXTaskManagerFilterer{contract: contract}}, nil
}

// ContractTriggerXTaskManagerMethods is an auto generated interface around an Ethereum contract.
type ContractTriggerXTaskManagerMethods interface {
	ContractTriggerXTaskManagerCalls
	ContractTriggerXTaskManagerTransacts
	ContractTriggerXTaskManagerFilters
}

// ContractTriggerXTaskManagerCalls is an auto generated interface that defines the call methods available for an Ethereum contract.
type ContractTriggerXTaskManagerCalls interface {
	TASKRESPONSEWINDOWBLOCK(opts *bind.CallOpts) (uint32, error)

	BlsApkRegistry(opts *bind.CallOpts) (common.Address, error)

	CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error)

	Delegation(opts *bind.CallOpts) (common.Address, error)

	GenerateTaskId(opts *bind.CallOpts, jobId uint32, taskNum uint32) ([8]byte, error)

	JobToTaskCounter(opts *bind.CallOpts, arg0 uint32) (uint32, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts, index uint8) (bool, error)

	Paused0(opts *bind.CallOpts) (*big.Int, error)

	PauserRegistry(opts *bind.CallOpts) (common.Address, error)

	RegistryCoordinator(opts *bind.CallOpts) (common.Address, error)

	ServiceManager(opts *bind.CallOpts) (common.Address, error)

	StakeRegistry(opts *bind.CallOpts) (common.Address, error)

	StaleStakesForbidden(opts *bind.CallOpts) (bool, error)

	TaskHashes(opts *bind.CallOpts, arg0 [8]byte) ([32]byte, error)

	TaskResponseHashes(opts *bind.CallOpts, arg0 [8]byte) ([32]byte, error)

	TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	}, error)
}

// ContractTriggerXTaskManagerTransacts is an auto generated interface that defines the transact methods available for an Ethereum contract.
type ContractTriggerXTaskManagerTransacts interface {
	CreateNewTask(opts *bind.TransactOpts, jobId uint32, quorumNumbers []byte, quorumThreshold uint8) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, initialOwner common.Address, _taskResponseWindowBlock uint32, _serviceManager common.Address) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error)

	PauseAll(opts *bind.TransactOpts) (*types.Transaction, error)

	RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	RespondToTask(opts *bind.TransactOpts, task ITriggerXTaskManagerTask, taskResponse ITriggerXTaskManagerTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error)

	SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error)

	SetStaleStakesForbidden(opts *bind.TransactOpts, value bool) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error)

	UpdateServiceManager(opts *bind.TransactOpts, _serviceManager common.Address) (*types.Transaction, error)
}

// ContractTriggerXTaskManagerFilterer is an auto generated interface that defines the log filtering methods available for an Ethereum contract.
type ContractTriggerXTaskManagerFilters interface {
	FilterInitialized(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerInitializedIterator, error)
	WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerInitialized) (event.Subscription, error)
	ParseInitialized(log types.Log) (*ContractTriggerXTaskManagerInitialized, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractTriggerXTaskManagerOwnershipTransferredIterator, error)
	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)
	ParseOwnershipTransferred(log types.Log) (*ContractTriggerXTaskManagerOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractTriggerXTaskManagerPausedIterator, error)
	WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerPaused, account []common.Address) (event.Subscription, error)
	ParsePaused(log types.Log) (*ContractTriggerXTaskManagerPaused, error)

	FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerPauserRegistrySetIterator, error)
	WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerPauserRegistrySet) (event.Subscription, error)
	ParsePauserRegistrySet(log types.Log) (*ContractTriggerXTaskManagerPauserRegistrySet, error)

	FilterStaleStakesForbiddenUpdate(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator, error)
	WatchStaleStakesForbiddenUpdate(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerStaleStakesForbiddenUpdate) (event.Subscription, error)
	ParseStaleStakesForbiddenUpdate(log types.Log) (*ContractTriggerXTaskManagerStaleStakesForbiddenUpdate, error)

	FilterTaskCreated(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerTaskCreatedIterator, error)
	WatchTaskCreated(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerTaskCreated) (event.Subscription, error)
	ParseTaskCreated(log types.Log) (*ContractTriggerXTaskManagerTaskCreated, error)

	FilterTaskResponded(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerTaskRespondedIterator, error)
	WatchTaskResponded(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerTaskResponded) (event.Subscription, error)
	ParseTaskResponded(log types.Log) (*ContractTriggerXTaskManagerTaskResponded, error)

	FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractTriggerXTaskManagerUnpausedIterator, error)
	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerUnpaused, account []common.Address) (event.Subscription, error)
	ParseUnpaused(log types.Log) (*ContractTriggerXTaskManagerUnpaused, error)
}

// ContractTriggerXTaskManager is an auto generated Go binding around an Ethereum contract.
type ContractTriggerXTaskManager struct {
	ContractTriggerXTaskManagerCaller     // Read-only binding to the contract
	ContractTriggerXTaskManagerTransactor // Write-only binding to the contract
	ContractTriggerXTaskManagerFilterer   // Log filterer for contract events
}

// ContractTriggerXTaskManager implements the ContractTriggerXTaskManagerMethods interface.
var _ ContractTriggerXTaskManagerMethods = (*ContractTriggerXTaskManager)(nil)

// ContractTriggerXTaskManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractTriggerXTaskManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTriggerXTaskManagerCaller implements the ContractTriggerXTaskManagerCalls interface.
var _ ContractTriggerXTaskManagerCalls = (*ContractTriggerXTaskManagerCaller)(nil)

// ContractTriggerXTaskManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTriggerXTaskManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTriggerXTaskManagerTransactor implements the ContractTriggerXTaskManagerTransacts interface.
var _ ContractTriggerXTaskManagerTransacts = (*ContractTriggerXTaskManagerTransactor)(nil)

// ContractTriggerXTaskManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractTriggerXTaskManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTriggerXTaskManagerFilterer implements the ContractTriggerXTaskManagerFilters interface.
var _ ContractTriggerXTaskManagerFilters = (*ContractTriggerXTaskManagerFilterer)(nil)

// ContractTriggerXTaskManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractTriggerXTaskManagerSession struct {
	Contract     *ContractTriggerXTaskManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                // Call options to use throughout this session
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ContractTriggerXTaskManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractTriggerXTaskManagerCallerSession struct {
	Contract *ContractTriggerXTaskManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                      // Call options to use throughout this session
}

// ContractTriggerXTaskManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTriggerXTaskManagerTransactorSession struct {
	Contract     *ContractTriggerXTaskManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// ContractTriggerXTaskManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractTriggerXTaskManagerRaw struct {
	Contract *ContractTriggerXTaskManager // Generic contract binding to access the raw methods on
}

// ContractTriggerXTaskManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractTriggerXTaskManagerCallerRaw struct {
	Contract *ContractTriggerXTaskManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTriggerXTaskManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTriggerXTaskManagerTransactorRaw struct {
	Contract *ContractTriggerXTaskManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractTriggerXTaskManager creates a new instance of ContractTriggerXTaskManager, bound to a specific deployed contract.
func NewContractTriggerXTaskManager(address common.Address, backend bind.ContractBackend) (*ContractTriggerXTaskManager, error) {
	contract, err := bindContractTriggerXTaskManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManager{ContractTriggerXTaskManagerCaller: ContractTriggerXTaskManagerCaller{contract: contract}, ContractTriggerXTaskManagerTransactor: ContractTriggerXTaskManagerTransactor{contract: contract}, ContractTriggerXTaskManagerFilterer: ContractTriggerXTaskManagerFilterer{contract: contract}}, nil
}

// NewContractTriggerXTaskManagerCaller creates a new read-only instance of ContractTriggerXTaskManager, bound to a specific deployed contract.
func NewContractTriggerXTaskManagerCaller(address common.Address, caller bind.ContractCaller) (*ContractTriggerXTaskManagerCaller, error) {
	contract, err := bindContractTriggerXTaskManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerCaller{contract: contract}, nil
}

// NewContractTriggerXTaskManagerTransactor creates a new write-only instance of ContractTriggerXTaskManager, bound to a specific deployed contract.
func NewContractTriggerXTaskManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTriggerXTaskManagerTransactor, error) {
	contract, err := bindContractTriggerXTaskManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerTransactor{contract: contract}, nil
}

// NewContractTriggerXTaskManagerFilterer creates a new log filterer instance of ContractTriggerXTaskManager, bound to a specific deployed contract.
func NewContractTriggerXTaskManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractTriggerXTaskManagerFilterer, error) {
	contract, err := bindContractTriggerXTaskManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerFilterer{contract: contract}, nil
}

// bindContractTriggerXTaskManager binds a generic wrapper to an already deployed contract.
func bindContractTriggerXTaskManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractTriggerXTaskManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractTriggerXTaskManager.Contract.ContractTriggerXTaskManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.ContractTriggerXTaskManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.ContractTriggerXTaskManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractTriggerXTaskManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.contract.Transact(opts, method, params...)
}

// TASKRESPONSEWINDOWBLOCK is a free data retrieval call binding the contract method 0x1ad43189.
//
// Solidity: function TASK_RESPONSE_WINDOW_BLOCK() view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) TASKRESPONSEWINDOWBLOCK(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "TASK_RESPONSE_WINDOW_BLOCK")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TASKRESPONSEWINDOWBLOCK is a free data retrieval call binding the contract method 0x1ad43189.
//
// Solidity: function TASK_RESPONSE_WINDOW_BLOCK() view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) TASKRESPONSEWINDOWBLOCK() (uint32, error) {
	return _ContractTriggerXTaskManager.Contract.TASKRESPONSEWINDOWBLOCK(&_ContractTriggerXTaskManager.CallOpts)
}

// TASKRESPONSEWINDOWBLOCK is a free data retrieval call binding the contract method 0x1ad43189.
//
// Solidity: function TASK_RESPONSE_WINDOW_BLOCK() view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) TASKRESPONSEWINDOWBLOCK() (uint32, error) {
	return _ContractTriggerXTaskManager.Contract.TASKRESPONSEWINDOWBLOCK(&_ContractTriggerXTaskManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) BlsApkRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "blsApkRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.BlsApkRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.BlsApkRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "checkSignatures", msgHash, quorumNumbers, referenceBlockNumber, params)

	if err != nil {
		return *new(IBLSSignatureCheckerQuorumStakeTotals), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSSignatureCheckerQuorumStakeTotals)).(*IBLSSignatureCheckerQuorumStakeTotals)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.CheckSignatures(&_ContractTriggerXTaskManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.CheckSignatures(&_ContractTriggerXTaskManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Delegation() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.Delegation(&_ContractTriggerXTaskManager.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) Delegation() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.Delegation(&_ContractTriggerXTaskManager.CallOpts)
}

// GenerateTaskId is a free data retrieval call binding the contract method 0x8e91269d.
//
// Solidity: function generateTaskId(uint32 jobId, uint32 taskNum) pure returns(bytes8)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) GenerateTaskId(opts *bind.CallOpts, jobId uint32, taskNum uint32) ([8]byte, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "generateTaskId", jobId, taskNum)

	if err != nil {
		return *new([8]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([8]byte)).(*[8]byte)

	return out0, err

}

// GenerateTaskId is a free data retrieval call binding the contract method 0x8e91269d.
//
// Solidity: function generateTaskId(uint32 jobId, uint32 taskNum) pure returns(bytes8)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) GenerateTaskId(jobId uint32, taskNum uint32) ([8]byte, error) {
	return _ContractTriggerXTaskManager.Contract.GenerateTaskId(&_ContractTriggerXTaskManager.CallOpts, jobId, taskNum)
}

// GenerateTaskId is a free data retrieval call binding the contract method 0x8e91269d.
//
// Solidity: function generateTaskId(uint32 jobId, uint32 taskNum) pure returns(bytes8)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) GenerateTaskId(jobId uint32, taskNum uint32) ([8]byte, error) {
	return _ContractTriggerXTaskManager.Contract.GenerateTaskId(&_ContractTriggerXTaskManager.CallOpts, jobId, taskNum)
}

// JobToTaskCounter is a free data retrieval call binding the contract method 0x9f2d70df.
//
// Solidity: function jobToTaskCounter(uint32 ) view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) JobToTaskCounter(opts *bind.CallOpts, arg0 uint32) (uint32, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "jobToTaskCounter", arg0)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// JobToTaskCounter is a free data retrieval call binding the contract method 0x9f2d70df.
//
// Solidity: function jobToTaskCounter(uint32 ) view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) JobToTaskCounter(arg0 uint32) (uint32, error) {
	return _ContractTriggerXTaskManager.Contract.JobToTaskCounter(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// JobToTaskCounter is a free data retrieval call binding the contract method 0x9f2d70df.
//
// Solidity: function jobToTaskCounter(uint32 ) view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) JobToTaskCounter(arg0 uint32) (uint32, error) {
	return _ContractTriggerXTaskManager.Contract.JobToTaskCounter(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Owner() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.Owner(&_ContractTriggerXTaskManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) Owner() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.Owner(&_ContractTriggerXTaskManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Paused(index uint8) (bool, error) {
	return _ContractTriggerXTaskManager.Contract.Paused(&_ContractTriggerXTaskManager.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) Paused(index uint8) (bool, error) {
	return _ContractTriggerXTaskManager.Contract.Paused(&_ContractTriggerXTaskManager.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Paused0() (*big.Int, error) {
	return _ContractTriggerXTaskManager.Contract.Paused0(&_ContractTriggerXTaskManager.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) Paused0() (*big.Int, error) {
	return _ContractTriggerXTaskManager.Contract.Paused0(&_ContractTriggerXTaskManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) PauserRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.PauserRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.PauserRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.RegistryCoordinator(&_ContractTriggerXTaskManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.RegistryCoordinator(&_ContractTriggerXTaskManager.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) ServiceManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "serviceManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) ServiceManager() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.ServiceManager(&_ContractTriggerXTaskManager.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) ServiceManager() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.ServiceManager(&_ContractTriggerXTaskManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) StakeRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.StakeRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.StakeRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) StaleStakesForbidden(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "staleStakesForbidden")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) StaleStakesForbidden() (bool, error) {
	return _ContractTriggerXTaskManager.Contract.StaleStakesForbidden(&_ContractTriggerXTaskManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) StaleStakesForbidden() (bool, error) {
	return _ContractTriggerXTaskManager.Contract.StaleStakesForbidden(&_ContractTriggerXTaskManager.CallOpts)
}

// TaskHashes is a free data retrieval call binding the contract method 0x304feba2.
//
// Solidity: function taskHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) TaskHashes(opts *bind.CallOpts, arg0 [8]byte) ([32]byte, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "taskHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TaskHashes is a free data retrieval call binding the contract method 0x304feba2.
//
// Solidity: function taskHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) TaskHashes(arg0 [8]byte) ([32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.TaskHashes(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// TaskHashes is a free data retrieval call binding the contract method 0x304feba2.
//
// Solidity: function taskHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) TaskHashes(arg0 [8]byte) ([32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.TaskHashes(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// TaskResponseHashes is a free data retrieval call binding the contract method 0xd82c7b5c.
//
// Solidity: function taskResponseHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) TaskResponseHashes(opts *bind.CallOpts, arg0 [8]byte) ([32]byte, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "taskResponseHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TaskResponseHashes is a free data retrieval call binding the contract method 0xd82c7b5c.
//
// Solidity: function taskResponseHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) TaskResponseHashes(arg0 [8]byte) ([32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.TaskResponseHashes(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// TaskResponseHashes is a free data retrieval call binding the contract method 0xd82c7b5c.
//
// Solidity: function taskResponseHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) TaskResponseHashes(arg0 [8]byte) ([32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.TaskResponseHashes(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "trySignatureAndApkVerification", msgHash, apk, apkG2, sigma)

	outstruct := new(struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PairingSuccessful = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.SiganatureIsValid = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractTriggerXTaskManager.Contract.TrySignatureAndApkVerification(&_ContractTriggerXTaskManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractTriggerXTaskManager.Contract.TrySignatureAndApkVerification(&_ContractTriggerXTaskManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// CreateNewTask is a paid mutator transaction binding the contract method 0x6566ba20.
//
// Solidity: function createNewTask(uint32 jobId, bytes quorumNumbers, uint8 quorumThreshold) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) CreateNewTask(opts *bind.TransactOpts, jobId uint32, quorumNumbers []byte, quorumThreshold uint8) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "createNewTask", jobId, quorumNumbers, quorumThreshold)
}

// CreateNewTask is a paid mutator transaction binding the contract method 0x6566ba20.
//
// Solidity: function createNewTask(uint32 jobId, bytes quorumNumbers, uint8 quorumThreshold) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) CreateNewTask(jobId uint32, quorumNumbers []byte, quorumThreshold uint8) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.CreateNewTask(&_ContractTriggerXTaskManager.TransactOpts, jobId, quorumNumbers, quorumThreshold)
}

// CreateNewTask is a paid mutator transaction binding the contract method 0x6566ba20.
//
// Solidity: function createNewTask(uint32 jobId, bytes quorumNumbers, uint8 quorumThreshold) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) CreateNewTask(jobId uint32, quorumNumbers []byte, quorumThreshold uint8) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.CreateNewTask(&_ContractTriggerXTaskManager.TransactOpts, jobId, quorumNumbers, quorumThreshold)
}

// Initialize is a paid mutator transaction binding the contract method 0xc1554a4b.
//
// Solidity: function initialize(address initialOwner, uint32 _taskResponseWindowBlock, address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address, _taskResponseWindowBlock uint32, _serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "initialize", initialOwner, _taskResponseWindowBlock, _serviceManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc1554a4b.
//
// Solidity: function initialize(address initialOwner, uint32 _taskResponseWindowBlock, address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Initialize(initialOwner common.Address, _taskResponseWindowBlock uint32, _serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Initialize(&_ContractTriggerXTaskManager.TransactOpts, initialOwner, _taskResponseWindowBlock, _serviceManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc1554a4b.
//
// Solidity: function initialize(address initialOwner, uint32 _taskResponseWindowBlock, address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) Initialize(initialOwner common.Address, _taskResponseWindowBlock uint32, _serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Initialize(&_ContractTriggerXTaskManager.TransactOpts, initialOwner, _taskResponseWindowBlock, _serviceManager)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Pause(&_ContractTriggerXTaskManager.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Pause(&_ContractTriggerXTaskManager.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) PauseAll() (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.PauseAll(&_ContractTriggerXTaskManager.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.PauseAll(&_ContractTriggerXTaskManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.RenounceOwnership(&_ContractTriggerXTaskManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.RenounceOwnership(&_ContractTriggerXTaskManager.TransactOpts)
}

// RespondToTask is a paid mutator transaction binding the contract method 0xbdf31991.
//
// Solidity: function respondToTask((uint32,uint32,uint32,bytes,uint8) task, (bytes8,bytes32) taskResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) RespondToTask(opts *bind.TransactOpts, task ITriggerXTaskManagerTask, taskResponse ITriggerXTaskManagerTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "respondToTask", task, taskResponse, nonSignerStakesAndSignature)
}

// RespondToTask is a paid mutator transaction binding the contract method 0xbdf31991.
//
// Solidity: function respondToTask((uint32,uint32,uint32,bytes,uint8) task, (bytes8,bytes32) taskResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) RespondToTask(task ITriggerXTaskManagerTask, taskResponse ITriggerXTaskManagerTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.RespondToTask(&_ContractTriggerXTaskManager.TransactOpts, task, taskResponse, nonSignerStakesAndSignature)
}

// RespondToTask is a paid mutator transaction binding the contract method 0xbdf31991.
//
// Solidity: function respondToTask((uint32,uint32,uint32,bytes,uint8) task, (bytes8,bytes32) taskResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) RespondToTask(task ITriggerXTaskManagerTask, taskResponse ITriggerXTaskManagerTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.RespondToTask(&_ContractTriggerXTaskManager.TransactOpts, task, taskResponse, nonSignerStakesAndSignature)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.SetPauserRegistry(&_ContractTriggerXTaskManager.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.SetPauserRegistry(&_ContractTriggerXTaskManager.TransactOpts, newPauserRegistry)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) SetStaleStakesForbidden(opts *bind.TransactOpts, value bool) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "setStaleStakesForbidden", value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.SetStaleStakesForbidden(&_ContractTriggerXTaskManager.TransactOpts, value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.SetStaleStakesForbidden(&_ContractTriggerXTaskManager.TransactOpts, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.TransferOwnership(&_ContractTriggerXTaskManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.TransferOwnership(&_ContractTriggerXTaskManager.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Unpause(&_ContractTriggerXTaskManager.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Unpause(&_ContractTriggerXTaskManager.TransactOpts, newPausedStatus)
}

// UpdateServiceManager is a paid mutator transaction binding the contract method 0x7d847d1b.
//
// Solidity: function updateServiceManager(address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) UpdateServiceManager(opts *bind.TransactOpts, _serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "updateServiceManager", _serviceManager)
}

// UpdateServiceManager is a paid mutator transaction binding the contract method 0x7d847d1b.
//
// Solidity: function updateServiceManager(address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) UpdateServiceManager(_serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.UpdateServiceManager(&_ContractTriggerXTaskManager.TransactOpts, _serviceManager)
}

// UpdateServiceManager is a paid mutator transaction binding the contract method 0x7d847d1b.
//
// Solidity: function updateServiceManager(address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) UpdateServiceManager(_serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.UpdateServiceManager(&_ContractTriggerXTaskManager.TransactOpts, _serviceManager)
}

// ContractTriggerXTaskManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerInitializedIterator struct {
	Event *ContractTriggerXTaskManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerInitialized represents a Initialized event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerInitializedIterator, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerInitializedIterator{contract: _ContractTriggerXTaskManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerInitialized)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseInitialized(log types.Log) (*ContractTriggerXTaskManagerInitialized, error) {
	event := new(ContractTriggerXTaskManagerInitialized)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerOwnershipTransferredIterator struct {
	Event *ContractTriggerXTaskManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractTriggerXTaskManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerOwnershipTransferredIterator{contract: _ContractTriggerXTaskManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerOwnershipTransferred)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ContractTriggerXTaskManagerOwnershipTransferred, error) {
	event := new(ContractTriggerXTaskManagerOwnershipTransferred)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerPausedIterator struct {
	Event *ContractTriggerXTaskManagerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerPaused represents a Paused event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractTriggerXTaskManagerPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerPausedIterator{contract: _ContractTriggerXTaskManager.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerPaused)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParsePaused(log types.Log) (*ContractTriggerXTaskManagerPaused, error) {
	event := new(ContractTriggerXTaskManagerPaused)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerPauserRegistrySetIterator struct {
	Event *ContractTriggerXTaskManagerPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerPauserRegistrySet represents a PauserRegistrySet event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerPauserRegistrySetIterator, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerPauserRegistrySetIterator{contract: _ContractTriggerXTaskManager.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerPauserRegistrySet)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParsePauserRegistrySet(log types.Log) (*ContractTriggerXTaskManagerPauserRegistrySet, error) {
	event := new(ContractTriggerXTaskManagerPauserRegistrySet)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator is returned from FilterStaleStakesForbiddenUpdate and is used to iterate over the raw logs and unpacked data for StaleStakesForbiddenUpdate events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator struct {
	Event *ContractTriggerXTaskManagerStaleStakesForbiddenUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerStaleStakesForbiddenUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerStaleStakesForbiddenUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerStaleStakesForbiddenUpdate represents a StaleStakesForbiddenUpdate event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerStaleStakesForbiddenUpdate struct {
	Value bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStaleStakesForbiddenUpdate is a free log retrieval operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterStaleStakesForbiddenUpdate(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator{contract: _ContractTriggerXTaskManager.contract, event: "StaleStakesForbiddenUpdate", logs: logs, sub: sub}, nil
}

// WatchStaleStakesForbiddenUpdate is a free log subscription operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchStaleStakesForbiddenUpdate(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerStaleStakesForbiddenUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerStaleStakesForbiddenUpdate)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaleStakesForbiddenUpdate is a log parse operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseStaleStakesForbiddenUpdate(log types.Log) (*ContractTriggerXTaskManagerStaleStakesForbiddenUpdate, error) {
	event := new(ContractTriggerXTaskManagerStaleStakesForbiddenUpdate)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerTaskCreatedIterator is returned from FilterTaskCreated and is used to iterate over the raw logs and unpacked data for TaskCreated events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerTaskCreatedIterator struct {
	Event *ContractTriggerXTaskManagerTaskCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerTaskCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerTaskCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerTaskCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerTaskCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerTaskCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerTaskCreated represents a TaskCreated event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerTaskCreated struct {
	TaskId   [8]byte
	TaskHash [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTaskCreated is a free log retrieval operation binding the contract event 0xabfb3a7c31b577bfadcbc582547c97e20e11cb2223dd8617bf0e283607cad8ad.
//
// Solidity: event TaskCreated(bytes8 taskId, bytes32 taskHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterTaskCreated(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerTaskCreatedIterator, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "TaskCreated")
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerTaskCreatedIterator{contract: _ContractTriggerXTaskManager.contract, event: "TaskCreated", logs: logs, sub: sub}, nil
}

// WatchTaskCreated is a free log subscription operation binding the contract event 0xabfb3a7c31b577bfadcbc582547c97e20e11cb2223dd8617bf0e283607cad8ad.
//
// Solidity: event TaskCreated(bytes8 taskId, bytes32 taskHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchTaskCreated(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerTaskCreated) (event.Subscription, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "TaskCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerTaskCreated)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "TaskCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskCreated is a log parse operation binding the contract event 0xabfb3a7c31b577bfadcbc582547c97e20e11cb2223dd8617bf0e283607cad8ad.
//
// Solidity: event TaskCreated(bytes8 taskId, bytes32 taskHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseTaskCreated(log types.Log) (*ContractTriggerXTaskManagerTaskCreated, error) {
	event := new(ContractTriggerXTaskManagerTaskCreated)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "TaskCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerTaskRespondedIterator is returned from FilterTaskResponded and is used to iterate over the raw logs and unpacked data for TaskResponded events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerTaskRespondedIterator struct {
	Event *ContractTriggerXTaskManagerTaskResponded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerTaskRespondedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerTaskResponded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerTaskResponded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerTaskRespondedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerTaskRespondedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerTaskResponded represents a TaskResponded event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerTaskResponded struct {
	TaskId           [8]byte
	TaskResponseHash [32]byte
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterTaskResponded is a free log retrieval operation binding the contract event 0x1d628bde448f73744b15323b0741929628bf470841cbcff2e6589437eb1dde3f.
//
// Solidity: event TaskResponded(bytes8 taskId, bytes32 taskResponseHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterTaskResponded(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerTaskRespondedIterator, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "TaskResponded")
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerTaskRespondedIterator{contract: _ContractTriggerXTaskManager.contract, event: "TaskResponded", logs: logs, sub: sub}, nil
}

// WatchTaskResponded is a free log subscription operation binding the contract event 0x1d628bde448f73744b15323b0741929628bf470841cbcff2e6589437eb1dde3f.
//
// Solidity: event TaskResponded(bytes8 taskId, bytes32 taskResponseHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchTaskResponded(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerTaskResponded) (event.Subscription, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "TaskResponded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerTaskResponded)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "TaskResponded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskResponded is a log parse operation binding the contract event 0x1d628bde448f73744b15323b0741929628bf470841cbcff2e6589437eb1dde3f.
//
// Solidity: event TaskResponded(bytes8 taskId, bytes32 taskResponseHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseTaskResponded(log types.Log) (*ContractTriggerXTaskManagerTaskResponded, error) {
	event := new(ContractTriggerXTaskManagerTaskResponded)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "TaskResponded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerUnpausedIterator struct {
	Event *ContractTriggerXTaskManagerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerUnpaused represents a Unpaused event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractTriggerXTaskManagerUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerUnpausedIterator{contract: _ContractTriggerXTaskManager.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerUnpaused)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseUnpaused(log types.Log) (*ContractTriggerXTaskManagerUnpaused, error) {
	event := new(ContractTriggerXTaskManagerUnpaused)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
