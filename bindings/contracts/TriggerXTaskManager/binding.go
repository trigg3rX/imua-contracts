// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractTriggerXTaskManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IBLSSignatureCheckerNonSignerStakesAndSignature is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerNonSignerStakesAndSignature struct {
	NonSignerQuorumBitmapIndices []uint32
	NonSignerPubkeys             []BN254G1Point
	QuorumApks                   []BN254G1Point
	ApkG2                        BN254G2Point
	Sigma                        BN254G1Point
	QuorumApkIndices             []uint32
	TotalStakeIndices            []uint32
	NonSignerStakeIndices        [][]uint32
}

// IBLSSignatureCheckerQuorumStakeTotals is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerQuorumStakeTotals struct {
	SignedStakeForQuorum []*big.Int
	TotalStakeForQuorum  []*big.Int
}

// ITriggerXTaskManagerTask is an auto generated low-level Go binding around an user-defined struct.
type ITriggerXTaskManagerTask struct {
	JobId            uint32
	TaskNum          uint32
	TaskCreatedBlock uint32
	QuorumNumbers    []byte
	QuorumThreshold  uint8
}

// ITriggerXTaskManagerTaskResponse is an auto generated low-level Go binding around an user-defined struct.
type ITriggerXTaskManagerTaskResponse struct {
	TaskId           [8]byte
	TaskResponseHash [32]byte
}

// ContractTriggerXTaskManagerMetaData contains all meta data concerning the ContractTriggerXTaskManager contract.
var ContractTriggerXTaskManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIRegistryCoordinator\",\"name\":\"_registryCoordinator\",\"type\":\"address\"},{\"internalType\":\"contractIPauserRegistry\",\"name\":\"_pauserRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BitmapValueTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BytesArrayLengthTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BytesArrayNotOrdered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrentlyPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECAddFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECMulFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpModFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputEmptyQuorumNumbers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputNonSignerLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBLSPairingKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBLSSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNewPausedStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQuorumApkHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReferenceBlocknumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonSignerPubkeysNotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRegistryCoordinatorOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyUnpauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ScalarTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StaleStakesForbidden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"StaleStakesForbiddenUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"taskId\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"taskId\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskResponseHash\",\"type\":\"bytes32\"}],\"name\":\"TaskResponded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TASK_RESPONSE_WINDOW_BLOCK\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blsApkRegistry\",\"outputs\":[{\"internalType\":\"contractIBLSApkRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"referenceBlockNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point[]\",\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point[]\",\"name\":\"quorumApks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"structBN254.G2Point\",\"name\":\"apkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"sigma\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[][]\",\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\"}],\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"checkSignatures\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96[]\",\"name\":\"signedStakeForQuorum\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"totalStakeForQuorum\",\"type\":\"uint96[]\"}],\"internalType\":\"structIBLSSignatureChecker.QuorumStakeTotals\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"jobId\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"quorumThreshold\",\"type\":\"uint8\"}],\"name\":\"createNewTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"contractIDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"jobId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taskNum\",\"type\":\"uint32\"}],\"name\":\"generateTaskId\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_taskResponseWindowBlock\",\"type\":\"uint32\"},{\"internalType\":\"contractITriggerXServiceManager\",\"name\":\"_serviceManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"jobToTaskCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserRegistry\",\"outputs\":[{\"internalType\":\"contractIPauserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryCoordinator\",\"outputs\":[{\"internalType\":\"contractIRegistryCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"jobId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taskNum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taskCreatedBlock\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"quorumThreshold\",\"type\":\"uint8\"}],\"internalType\":\"structITriggerXTaskManager.Task\",\"name\":\"task\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes8\",\"name\":\"taskId\",\"type\":\"bytes8\"},{\"internalType\":\"bytes32\",\"name\":\"taskResponseHash\",\"type\":\"bytes32\"}],\"internalType\":\"structITriggerXTaskManager.TaskResponse\",\"name\":\"taskResponse\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point[]\",\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point[]\",\"name\":\"quorumApks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"structBN254.G2Point\",\"name\":\"apkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"sigma\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[][]\",\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\"}],\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"name\":\"nonSignerStakesAndSignature\",\"type\":\"tuple\"}],\"name\":\"respondToTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceManager\",\"outputs\":[{\"internalType\":\"contractITriggerXServiceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setStaleStakesForbidden\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"contractIStakeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staleStakesForbidden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"name\":\"taskHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"name\":\"taskResponseHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"apk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"structBN254.G2Point\",\"name\":\"apkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"sigma\",\"type\":\"tuple\"}],\"name\":\"trySignatureAndApkVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pairingSuccessful\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"siganatureIsValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serviceManager\",\"type\":\"address\"}],\"name\":\"updateServiceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526004361015610011575f80fd5b5f3560e01c8063136439dd146101c4578063171f1d5b146101bf5780631ad43189146101ba578063304feba2146101b55780633998fdd3146101b0578063416c7e5e146101ab578063595c6a67146101a65780635ac86ab7146101a15780635c975abb1461019c5780635df45946146101975780636566ba2014610192578063683048351461018d5780636d14a987146101885780636efb463614610183578063715018a61461017e5780637d847d1b14610179578063886f1195146101745780638da5cb5b1461016f5780638e91269d1461016a5780639f2d70df14610165578063b98d090814610160578063bdf319911461015b578063c1554a4b14610156578063d82c7b5c14610151578063df5cf7231461014c578063f2fde38b146101475763fabc1cbc14610142575f80fd5b611099565b611008565b610fc4565b610f85565b610e85565b610e1d565b610dfb565b610dbc565b610d75565b610d4d565b610d09565b610cc2565b610c56565b610ba9565b6108b5565b610871565b610762565b6106e3565b6106c6565b610693565b610615565b61051f565b6104ed565b6104ae565b610479565b610411565b346102845760203660031901126102845760043560405163237dfb4760e11b8152336004820152906020826024817f0000000000000000000000003db5b2115c2c4619255c107c8daade9dd35b366c6001600160a01b03165afa91821561027f5761024e9261023a915f91610250575b5061119e565b610249606654828116146111b4565b612606565b005b610272915060203d602011610278575b61026a81836102bc565b81019061117b565b5f610234565b503d610260565b611193565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b604081019081106001600160401b038211176102b757604052565b610288565b90601f801991011681019081106001600160401b038211176102b757604052565b604051906102ed610100836102bc565b565b604051906102ed6040836102bc565b906102ed60405192836102bc565b60409060e319011261028457604051906103258261029c565b60e4358252610104356020830152565b91908260409103126102845760405161034d8161029c565b6020808294803584520135910152565b9080601f8301121561028457604051916103786040846102bc565b82906040810192831161028457905b8282106103945750505090565b8135815260209182019101610387565b906080606319830112610284576040516103bd8161029c565b60206103d882946103cf81606461035d565b845260a461035d565b910152565b91906080838203126102845760206103d8604051926103fb8461029c565b60408496610409838261035d565b86520161035d565b34610284576101203660031901126102845760043560403660231901126102845761046960409182516104438161029c565b60243581526044356020820152610459366103a4565b906104633661030c565b92611208565b8251911515825215156020820152f35b34610284575f36600319011261028457602063ffffffff60c95416604051908152f35b6001600160c01b031981160361028457565b34610284576020366003190112610284576004356104cb8161049c565b6001600160401b0360c01b165f5260cb602052602060405f2054604051908152f35b34610284575f3660031901126102845760cd546040516001600160a01b039091168152602090f35b8015150361028457565b346102845760203660031901126102845760043561053c81610515565b604051638da5cb5b60e01b81526020816004817f000000000000000000000000b438c6fc1652148bb758b939831f9a2cd59ce02b6001600160a01b03165afa90811561027f575f916105e6575b506001600160a01b031633036105d75760207f40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc91151560ff196097541660ff821617609755604051908152a1005b637070f3b160e11b5f5260045ffd5b610608915060203d60201161060e575b61060081836102bc565b8101906112ee565b5f610589565b503d6105f6565b34610284575f3660031901126102845760405163237dfb4760e11b81523360048201526020816024817f0000000000000000000000003db5b2115c2c4619255c107c8daade9dd35b366c6001600160a01b03165afa801561027f57610680915f91610250575061119e565b61024e6125d2565b60ff81160361028457565b34610284576020366003190112610284576020600160ff6004356106b681610688565b161b806066541614604051908152f35b34610284575f366003190112610284576020606654604051908152f35b34610284575f366003190112610284576040517f000000000000000000000000c275cce555cc4bd954ff078621778368f9006f1c6001600160a01b03168152602090f35b63ffffffff81160361028457565b9181601f84011215610284578235916001600160401b038311610284576020838186019501011161028457565b346102845760603660031901126102845760043561077f81610727565b6024356001600160401b0381116102845761079e903690600401610735565b604435916107ab83610688565b60cd54604051635285320760e11b815290602090829060049082906001600160a01b03165afa90811561027f575f91610852575b506001600160a01b031633036107f85761024e93611425565b60405162461bcd60e51b815260206004820152602c60248201527f4f6e6c7920746865207461736b206d616e616765722063616e2063616c6c207460448201526b3434b990333ab731ba34b7b760a11b6064820152608490fd5b61086b915060203d60201161060e5761060081836102bc565b5f6107df565b34610284575f366003190112610284576040517f000000000000000000000000d7c48ab86ab9390e09165013600d5e8721cb3e1d6001600160a01b03168152602090f35b34610284575f366003190112610284576040517f000000000000000000000000b438c6fc1652148bb758b939831f9a2cd59ce02b6001600160a01b03168152602090f35b6001600160401b0381116102b75760051b60200190565b9080601f83011215610284578135610927816108f9565b9261093560405194856102bc565b81845260208085019260051b82010192831161028457602001905b82821061095d5750505090565b60208091833561096c81610727565b815201910190610950565b81601f8201121561028457803561098d816108f9565b9261099b60405194856102bc565b81845260208085019260061b8401019281841161028457602001915b8383106109c5575050505090565b60206040916109d48486610335565b8152019201916109b7565b9080601f830112156102845781356109f6816108f9565b92610a0460405194856102bc565b81845260208085019260051b820101918383116102845760208201905b838210610a3057505050505090565b81356001600160401b03811161028457602091610a5287848094880101610910565b815201910190610a21565b9190916101808184031261028457610a736102dd565b9281356001600160401b0381116102845781610a90918401610910565b845260208201356001600160401b0381116102845781610ab1918401610977565b602085015260408201356001600160401b0381116102845781610ad5918401610977565b6040850152610ae781606084016103dd565b6060850152610af98160e08401610335565b60808501526101208201356001600160401b0381116102845781610b1e918401610910565b60a08501526101408201356001600160401b0381116102845781610b43918401610910565b60c08501526101608201356001600160401b03811161028457610b6692016109df565b60e0830152565b90602080835192838152019201905f5b818110610b8a5750505090565b82516001600160601b0316845260209384019390920191600101610b7d565b34610284576080366003190112610284576004356024356001600160401b03811161028457610bdc903690600401610735565b9091604435610bea81610727565b606435926001600160401b03841161028457610c4c94610c11610c17953690600401610a5d565b9361180c565b604051928392604084526020610c3882516040808801526080870190610b6d565b910151848203603f19016060860152610b6d565b9060208301520390f35b34610284575f36600319011261028457610c6e612c37565b603380546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b6001600160a01b0381160361028457565b3461028457602036600319011261028457600435610cdf81610cb1565b610ce7612c37565b60cd80546001600160a01b0319166001600160a01b0392909216919091179055005b34610284575f366003190112610284576040517f0000000000000000000000003db5b2115c2c4619255c107c8daade9dd35b366c6001600160a01b03168152602090f35b34610284575f366003190112610284576033546040516001600160a01b039091168152602090f35b34610284576040366003190112610284576020610da9600435610d9781610727565b60243590610da482610727565b61211a565b6040516001600160c01b03199091168152f35b346102845760203660031901126102845763ffffffff600435610dde81610727565b165f5260ca602052602063ffffffff60405f205416604051908152f35b34610284575f36600319011261028457602060ff609754166040519015158152f35b34610284576080366003190112610284576004356001600160401b0381116102845760a0600319823603011261028457604036602319011261028457606435906001600160401b03821161028457610e7c61024e923690600401610a5d565b90600401612188565b3461028457606036600319011261028457600435610ea281610cb1565b610efd602435610eb181610727565b60443590610ebe82610cb1565b5f5493610ee360ff600887901c161580968197610f77575b8115610f57575b50612534565b84610ef4600160ff195f5416175f55565b610f4057612597565b610f0357005b610f1161ff00195f54165f55565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b610f5261010061ff00195f5416175f55565b612597565b303b15915081610f69575b505f610edd565b60ff1660011490505f610f62565b600160ff8216109150610ed6565b3461028457602036600319011261028457600435610fa28161049c565b6001600160401b0360c01b165f5260cc602052602060405f2054604051908152f35b34610284575f366003190112610284576040517f000000000000000000000000a44151489861fe9e3055d95adc98fbd462b948e76001600160a01b03168152602090f35b346102845760203660031901126102845760043561102581610cb1565b61102d612c37565b6001600160a01b038116156110455761024e90612c8f565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346102845760203660031901126102845760043560405163755b36bd60e11b81526020816004817f0000000000000000000000003db5b2115c2c4619255c107c8daade9dd35b366c6001600160a01b03165afa90811561027f575f9161115c575b506001600160a01b0316330361114d5761111b6066541982198116146111b4565b806066556040519081527f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c60203392a2005b63794821ff60e01b5f5260045ffd5b611175915060203d60201161060e5761060081836102bc565b5f6110fa565b90816020910312610284575161119081610515565b90565b6040513d5f823e3d90fd5b156111a557565b631d77d47760e21b5f5260045ffd5b156111bb57565b63c61dca5d60e01b5f5260045ffd5b634e487b7160e01b5f52603260045260245ffd5b9060028110156111ef5760051b0190565b6111ca565b634e487b7160e01b5f52601260045260245ffd5b6112e46112c16112ea956112bb6112b485875160208901518a515160208c51015160208d016020815151915101519189519360208b0151956040519760208901998a5260208a015260408901526060880152608087015260a086015260c085015260e084015261010083015261128b81610120840103601f1981018352826102bc565b5190207f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001900690565b809661267c565b906126c2565b926112bb6112d66112d0612724565b9461281b565b916112df612937565b61267c565b9161296b565b9091565b90816020910312610284575161119081610cb1565b6040519060a082018281106001600160401b038211176102b7576040525f6080838281528260208201528260408201526060808201520152565b9291926001600160401b0382116102b75760405191611366601f8201601f1916602001846102bc565b829481845281830111610284578281602093845f960137010152565b60206113e8608060e09483855263ffffffff8151168486015263ffffffff8482015116604086015263ffffffff6040820151166060860152606081015160a08387015280519485918260c0890152018787015e5f858501870152015160ff1660a0840152565b601f01601f1916010190565b634e487b7160e01b5f52601160045260245ffd5b63ffffffff60019116019063ffffffff821161142057565b6113f4565b916114bb6102ed946114ac7fabfb3a7c31b577bfadcbc582547c97e20e11cb2223dd8617bf0e283607cad8ad9461145a611303565b63ffffffff881681529461149961148c6114828a63ffffffff165f5260ca60205260405f2090565b5463ffffffff1690565b63ffffffff166020880152565b4363ffffffff166040870152369161133d565b606084015260ff166080830152565b6114df6114d96114828563ffffffff165f5260ca60205260405f2090565b8461211a565b90604051611503816114f5602082019485611382565b03601f1981018352826102bc565b5190206001600160c01b0319919091165f81815260cb60209081526040918290208490558151928352820192909252a161156e6115596115546114828463ffffffff165f5260ca60205260405f2090565b611408565b9163ffffffff165f5260ca60205260405f2090565b9063ffffffff1663ffffffff19825416179055565b604051906115908261029c565b60606020838281520152565b156115a357565b62f8202d60e51b5f5260045ffd5b156115b857565b6343714afd60e01b5f5260045ffd5b156115ce57565b635f832f4160e01b5f5260045ffd5b156115e457565b634b874f4560e01b5f5260045ffd5b906115fd826108f9565b61160a60405191826102bc565b828152809261161b601f19916108f9565b0190602036910137565b90816020910312610284575161119081610688565b80518210156111ef5760209160051b010190565b5f1981019190821161142057565b1561166357565b633fdc650560e21b5f5260045ffd5b9081602091031261028457516001600160c01b03811681036102845790565b90816020910312610284575161119081610727565b908210156111ef570190565b90816020910312610284575190565b906001820180921161142057565b906002820180921161142057565b906003820180921161142057565b906004820180921161142057565b906005820180921161142057565b9190820180921161142057565b1561171b57565b63affc5edb60e01b5f5260045ffd5b90816020910312610284575167ffffffffffffffff19811681036102845790565b1561175257565b63e1310aed60e01b5f5260045ffd5b9081602091031261028457516001600160601b03811681036102845790565b906001600160601b03809116911603906001600160601b03821161142057565b156117a757565b6367988d3360e01b5f5260045ffd5b156117bd57565b63ab1b236b60e01b5f5260045ffd5b60049163ffffffff60e01b9060e01b1681520160208251919201905f5b8181106117f65750505090565b82518452602093840193909201916001016117e9565b94939290919361181a611583565b5061182685151561159c565b60408401515185148061210c575b806120fe575b806120f0575b611849906115b1565b61185b602085015151855151146115c7565b61187263ffffffff431663ffffffff8416106115dd565b61187a6102ef565b5f81525f60208201529261188c611583565b611895876115f3565b60208201526118a3876115f3565b81526118ad611583565b926118bc6020880151516115f3565b84526118cc6020880151516115f3565b602085810191909152604051639aa1653d60e01b815290816004817f000000000000000000000000b438c6fc1652148bb758b939831f9a2cd59ce02b6001600160a01b03165afa801561027f57611935915f916120c1575b50611930368b8761133d565b612a99565b985f965b60208901518051891015611ac1576020886119a661199c8c6119948f96868e61197961196686809561163a565b5180515f526020015160205260405f2090565b611986848484015161163a565b5282611a8e575b015161163a565b51955161163a565b5163ffffffff1690565b6040516304ec635160e01b8152600481019490945263ffffffff9182166024850152166044830152816064816001600160a01b037f000000000000000000000000b438c6fc1652148bb758b939831f9a2cd59ce02b165afa91821561027f576112bb8a611a538f611a4c8f8460208f92611a4393611a3b8460019e611a599e5f91611a61575b508f8060c01b0316925161163a565b52015161163a565b51938d5161163a565b5116612ac4565b90612af5565b970196611939565b611a819150863d8111611a87575b611a7981836102bc565b810190611672565b5f611a2c565b503d611a6f565b611abc611a9e848484015161163a565b51611ab584840151611aaf8761164e565b9061163a565b511061165c565b61198d565b50909597949650611ad6919893929950612bb2565b91611ae360975460ff1690565b9081156120b9576040516318891fd760e31b81526020816004817f000000000000000000000000a44151489861fe9e3055d95adc98fbd462b948e76001600160a01b03165afa90811561027f575f9161208a575b5091905b5f925b818410611b9457505050505092611b7b611b76611b6f611b8e95856114f59860806060602099015192015192611208565b91906117a0565b6117b6565b01516040519283916020830195866117cc565b51902090565b92989596909399919794878b888c888d611f74575b61199c8260a0611bfd611bf7611be984611c0597611be3611bd56119668f9c604060209f9e015161163a565b67ffffffffffffffff191690565b9b6116a6565b356001600160f81b03191690565b60f81c90565b97015161163a565b604051631a2f32ab60e21b815260ff95909516600486015263ffffffff9182166024860152166044840152826064816001600160a01b037f000000000000000000000000c275cce555cc4bd954ff078621778368f9006f1c165afa90811561027f57611cc961199c8f958f90611cc18f978f96848f611cbb60c096611cb4848f60209f9061198d611be999604093611bf79c5f91611f46575b5067ffffffffffffffff1991821691161461174b565b51906126c2565b9c6116a6565b96015161163a565b604051636414a62b60e11b815260ff94909416600485015263ffffffff9182166024850152166044830152816064816001600160a01b037f000000000000000000000000d7c48ab86ab9390e09165013600d5e8721cb3e1d165afa90811561027f57611d56918c8f925f92611f22575b506020611d489293015161163a565b906001600160601b03169052565b611d838c611d488c611d7c611d6f82602086015161163a565b516001600160601b031690565b925161163a565b5f985f5b60208a015151811015611f09578b8d611dc589611db8611bf7611be9868f89611db0915161163a565b5194876116a6565b60ff161c60019081161490565b611dd4575b5050600101611d87565b8a8a611e5c859f948f9686611e168f9360e0611e0d61199c956020611e05611bf7611be9839f611e1c9c89916116a6565b9a015161163a565b519b015161163a565b5161163a565b60405163795f4a5760e11b815260ff909316600484015263ffffffff93841660248401526044830196909652919094166064850152839081906084820190565b03817f000000000000000000000000d7c48ab86ab9390e09165013600d5e8721cb3e1d6001600160a01b03165afa90811561027f578f611ec8908f936001959486955f92611ed3575b50611ec2611d4892935193611ebd611d6f848761163a565b611780565b9261163a565b019a90508b8d611dca565b611d489250611efb611ec29160203d8111611f02575b611ef381836102bc565b810190611761565b9250611ea5565b503d611ee9565b5093919796996001919699509a94929a01929190611b3e565b611d489250611f3f602091823d8111611f0257611ef381836102bc565b9250611d39565b6020611f6792503d8111611f6d575b611f5f81836102bc565b81019061172a565b5f611c9e565b503d611f55565b611fb19450611f8e9250611bf791611be9916020956116a6565b60405163124d062160e11b815260ff909116600482015291829081906024820190565b03817f000000000000000000000000b438c6fc1652148bb758b939831f9a2cd59ce02b6001600160a01b03165afa801561027f57602089611c058f938f60a08f97611bf7611be98f8f90611be3611bd56119668f60408b96918f889361199c9f6120359061203b93611bfd9f5f92612051575b5063ffffffff809116931690611707565b11611714565b5050505050509750505050505092935050611ba9565b602063ffffffff929350829161207b913d8111612083575b61207381836102bc565b8101906116b2565b929150612024565b503d612069565b6120ac915060203d6020116120b2575b6120a481836102bc565b810190611691565b5f611b37565b503d61209a565b5f9190611b3b565b6120e3915060203d6020116120e9575b6120db81836102bc565b810190611625565b5f611924565b503d6120d1565b5060e0840151518514611840565b5060c084015151851461183a565b5060a0840151518514611834565b6040516001600160e01b031960e092831b8116602083019081529390921b90911660248201526008815261214f6028826102bc565b5190516001600160c01b0319811691906008821061216c57505090565b6001600160c01b031960089290920360031b82901b1616919050565b60cd54604051633f4e3b2360e21b815291929190602090829060049082906001600160a01b03165afa90811561027f575f91612236575b506001600160a01b031633036121da5760246102ed926123c1565b60405162461bcd60e51b815260206004820152602e60248201527f4f6e6c7920746865207461736b2076616c696461746f722063616e2063616c6c60448201526d103a3434b990333ab731ba34b7b760911b6064820152608490fd5b61224f915060203d60201161060e5761060081836102bc565b5f6121bf565b6020809180356122648161049c565b6001600160c01b03191684520135910152565b6040810192916102ed9190612255565b903590601e198136030182121561028457018035906001600160401b0382116102845760200191813603831361028457565b3561119081610727565b9060648202918083046064149015171561142057565b9060068202918083046006149015171561142057565b3561119081610688565b906001600160601b03809116911602906001600160601b03821691820361142057565b1561232357565b608460405162461bcd60e51b815260206004820152604060248201527f5369676e61746f7269657320646f206e6f74206f776e206174206c656173742060448201527f7468726573686f6c642070657263656e74616765206f6620612071756f72756d6064820152fd5b90929160206060916123a3846080810197612255565b63ffffffff81511660408501520151910152565b356111908161049c565b61240060405160208101906123da816114f58785612277565b5190209360608301946123ed8685612287565b906123fa604087016122b9565b9261180c565b5f9391935b61240f8685612287565b90508110156124805760018161247887612471612445612456611d6f866020611cc1612451612445611d6f61240f9e8b5161163a565b6001600160601b031690565b6122c3565b61246b61246560808d016122ef565b60ff1690565b906122f9565b111561231c565b019050612405565b50915091507f1d628bde448f73744b15323b0741929628bf470841cbcff2e6589437eb1dde3f92506124b06102ef565b4363ffffffff1681529060208201526040516124d5816114f56020820194868661238d565b5190206124fe6124e4836123b7565b6001600160401b0360c01b165f5260cc60205260405f2090565b556125146124e461250e836123b7565b926123b7565b54604080516001600160c01b0319939093168352602083019190915290a1565b1561253b57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b906125a663ffffffff92612c8f565b1663ffffffff1960c954161760c95560018060a01b03166001600160601b0360a01b60cd54161760cd55565b5f196066556040515f1981527fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d60203392a2565b806066556040519081527fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d60203392a2565b604051906126458261029c565b5f6020838281520152565b6040519061018061266181846102bc565b368337565b604051906126756020836102bc565b6020368337565b9190604090606061268b612638565b948592602085519261269d85856102bc565b8436853780518452015160208301528482015260076107cf195a01fa156126c057565bfe5b6020929160806040926126d3612638565b958693818651936126e486866102bc565b85368637805185520151828401528051868401520151606082015260066107cf195a01fa80156126c0571561271557565b63d4b68fd760e01b5f5260045ffd5b6040516127308161029c565b604090815161273f83826102bc565b823682378152602082519161275484846102bc565b833684370152805161276682826102bc565b7f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60208201528151906127bc83836102bc565b7f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6020830152612811835193846102bc565b8252602082015290565b5f516020612d9b5f395f51905f5290612832612638565b505f919006602060c0835b612932575f935f516020612d9b5f395f51905f526003818681818009090860405161286885826102bc565b8436823784818560405161287c82826102bc565b813682378381528360208201528360408201528560608201527f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f5260808201525f516020612d9b5f395f51905f5260a082015260056107cf195a01fa80156126c0576128e690612d84565b5191612932575f516020612d9b5f395f51905f528280091461291d57505f516020612d9b5f395f51905f5260015f9408929361283d565b929350506129296102ef565b92835282015290565b6111f4565b61293f612638565b5060405161294c8161029c565b600181526002602082015290565b90600c8110156111ef5760051b0190565b9392909161297960406102fe565b948552602085015261298b60406102fe565b918252602082015261299b612650565b925f5b600281106129c8575050506020610180926129b7612666565b93849160086201d4c0fa9151151590565b806129d46001926122d9565b6129de82856111de565b51516129ea828961295a565b5260206129f783866111de565b510151612a0c612a06836116c1565b8961295a565b52612a1782866111de565b515151612a26612a06836116cf565b52612a3c612a3483876111de565b515160200190565b51612a49612a06836116dd565b526020612a5683876111de565b51015151612a66612a06836116eb565b52612a92612a8c612a856020612a7c868a6111de565b51015160200190565b51926116f9565b8861295a565b520161299e565b906001612aa760ff93612cfe565b928392161b1115612ab55790565b63ca95733360e01b5f5260045ffd5b805f915b612ad0575090565b5f1981018181116114205761ffff9116911661ffff8114611420576001019080612ac8565b90612afe612638565b5061ffff811690610200821015612ba35760018214612b9e57612b1f6102ef565b5f81525f602082015292906001905f925b61ffff8316851015612b4457505050505090565b600161ffff831660ff86161c811614612b7e575b6001612b74612b698360ff946126c2565b9460011b61fffe1690565b9401169291612b30565b946001612b74612b69612b938960ff956126c2565b989350505050612b58565b505090565b637fc4ea7d60e11b5f5260045ffd5b612bba612638565b50805190811580612c2b575b15612be7575050604051612bdb6040826102bc565b5f81525f602082015290565b60205f516020612d9b5f395f51905f52910151065f516020612d9b5f395f51905f52035f516020612d9b5f395f51905f52811161142057604051916128118361029c565b50602081015115612bc6565b6033546001600160a01b03163303612c4b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b9081518110156111ef570160200190565b15612cef57565b631019106960e31b5f5260045ffd5b90610100825111612d7557815115612d7057602082015160019060f81c81901b5b8351821015612d6b57600190612d56612d4c611bf7612d3e8689612cd7565b516001600160f81b03191690565b60ff600191161b90565b90612d62818311612ce8565b17910190612d1f565b925050565b5f9150565b637da54e4760e11b5f5260045ffd5b15612d8b57565b63d51edae360e01b5f5260045ffdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220c207223888f3144c6659519a3dd01607a957b33b393a0d4c19ec8b017ed6784764736f6c634300081b0033",
}

// ContractTriggerXTaskManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractTriggerXTaskManagerMetaData.ABI instead.
var ContractTriggerXTaskManagerABI = ContractTriggerXTaskManagerMetaData.ABI

// ContractTriggerXTaskManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractTriggerXTaskManagerMetaData.Bin instead.
var ContractTriggerXTaskManagerBin = ContractTriggerXTaskManagerMetaData.Bin

// DeployContractTriggerXTaskManager deploys a new Ethereum contract, binding an instance of ContractTriggerXTaskManager to it.
func DeployContractTriggerXTaskManager(auth *bind.TransactOpts, backend bind.ContractBackend, _registryCoordinator common.Address, _pauserRegistry common.Address) (common.Address, *types.Transaction, *ContractTriggerXTaskManager, error) {
	parsed, err := ContractTriggerXTaskManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractTriggerXTaskManagerBin), backend, _registryCoordinator, _pauserRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractTriggerXTaskManager{ContractTriggerXTaskManagerCaller: ContractTriggerXTaskManagerCaller{contract: contract}, ContractTriggerXTaskManagerTransactor: ContractTriggerXTaskManagerTransactor{contract: contract}, ContractTriggerXTaskManagerFilterer: ContractTriggerXTaskManagerFilterer{contract: contract}}, nil
}

// ContractTriggerXTaskManagerMethods is an auto generated interface around an Ethereum contract.
type ContractTriggerXTaskManagerMethods interface {
	ContractTriggerXTaskManagerCalls
	ContractTriggerXTaskManagerTransacts
	ContractTriggerXTaskManagerFilters
}

// ContractTriggerXTaskManagerCalls is an auto generated interface that defines the call methods available for an Ethereum contract.
type ContractTriggerXTaskManagerCalls interface {
	TASKRESPONSEWINDOWBLOCK(opts *bind.CallOpts) (uint32, error)

	BlsApkRegistry(opts *bind.CallOpts) (common.Address, error)

	CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error)

	Delegation(opts *bind.CallOpts) (common.Address, error)

	GenerateTaskId(opts *bind.CallOpts, jobId uint32, taskNum uint32) ([8]byte, error)

	JobToTaskCounter(opts *bind.CallOpts, arg0 uint32) (uint32, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Paused(opts *bind.CallOpts, index uint8) (bool, error)

	Paused0(opts *bind.CallOpts) (*big.Int, error)

	PauserRegistry(opts *bind.CallOpts) (common.Address, error)

	RegistryCoordinator(opts *bind.CallOpts) (common.Address, error)

	ServiceManager(opts *bind.CallOpts) (common.Address, error)

	StakeRegistry(opts *bind.CallOpts) (common.Address, error)

	StaleStakesForbidden(opts *bind.CallOpts) (bool, error)

	TaskHashes(opts *bind.CallOpts, arg0 [8]byte) ([32]byte, error)

	TaskResponseHashes(opts *bind.CallOpts, arg0 [8]byte) ([32]byte, error)

	TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	}, error)
}

// ContractTriggerXTaskManagerTransacts is an auto generated interface that defines the transact methods available for an Ethereum contract.
type ContractTriggerXTaskManagerTransacts interface {
	CreateNewTask(opts *bind.TransactOpts, jobId uint32, quorumNumbers []byte, quorumThreshold uint8) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, initialOwner common.Address, _taskResponseWindowBlock uint32, _serviceManager common.Address) (*types.Transaction, error)

	Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error)

	PauseAll(opts *bind.TransactOpts) (*types.Transaction, error)

	RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	RespondToTask(opts *bind.TransactOpts, task ITriggerXTaskManagerTask, taskResponse ITriggerXTaskManagerTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error)

	SetStaleStakesForbidden(opts *bind.TransactOpts, value bool) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error)

	UpdateServiceManager(opts *bind.TransactOpts, _serviceManager common.Address) (*types.Transaction, error)
}

// ContractTriggerXTaskManagerFilterer is an auto generated interface that defines the log filtering methods available for an Ethereum contract.
type ContractTriggerXTaskManagerFilters interface {
	FilterInitialized(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerInitializedIterator, error)
	WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerInitialized) (event.Subscription, error)
	ParseInitialized(log types.Log) (*ContractTriggerXTaskManagerInitialized, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractTriggerXTaskManagerOwnershipTransferredIterator, error)
	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)
	ParseOwnershipTransferred(log types.Log) (*ContractTriggerXTaskManagerOwnershipTransferred, error)

	FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractTriggerXTaskManagerPausedIterator, error)
	WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerPaused, account []common.Address) (event.Subscription, error)
	ParsePaused(log types.Log) (*ContractTriggerXTaskManagerPaused, error)

	FilterStaleStakesForbiddenUpdate(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator, error)
	WatchStaleStakesForbiddenUpdate(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerStaleStakesForbiddenUpdate) (event.Subscription, error)
	ParseStaleStakesForbiddenUpdate(log types.Log) (*ContractTriggerXTaskManagerStaleStakesForbiddenUpdate, error)

	FilterTaskCreated(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerTaskCreatedIterator, error)
	WatchTaskCreated(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerTaskCreated) (event.Subscription, error)
	ParseTaskCreated(log types.Log) (*ContractTriggerXTaskManagerTaskCreated, error)

	FilterTaskResponded(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerTaskRespondedIterator, error)
	WatchTaskResponded(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerTaskResponded) (event.Subscription, error)
	ParseTaskResponded(log types.Log) (*ContractTriggerXTaskManagerTaskResponded, error)

	FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractTriggerXTaskManagerUnpausedIterator, error)
	WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerUnpaused, account []common.Address) (event.Subscription, error)
	ParseUnpaused(log types.Log) (*ContractTriggerXTaskManagerUnpaused, error)
}

// ContractTriggerXTaskManager is an auto generated Go binding around an Ethereum contract.
type ContractTriggerXTaskManager struct {
	ContractTriggerXTaskManagerCaller     // Read-only binding to the contract
	ContractTriggerXTaskManagerTransactor // Write-only binding to the contract
	ContractTriggerXTaskManagerFilterer   // Log filterer for contract events
}

// ContractTriggerXTaskManager implements the ContractTriggerXTaskManagerMethods interface.
var _ ContractTriggerXTaskManagerMethods = (*ContractTriggerXTaskManager)(nil)

// ContractTriggerXTaskManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractTriggerXTaskManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTriggerXTaskManagerCaller implements the ContractTriggerXTaskManagerCalls interface.
var _ ContractTriggerXTaskManagerCalls = (*ContractTriggerXTaskManagerCaller)(nil)

// ContractTriggerXTaskManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTriggerXTaskManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTriggerXTaskManagerTransactor implements the ContractTriggerXTaskManagerTransacts interface.
var _ ContractTriggerXTaskManagerTransacts = (*ContractTriggerXTaskManagerTransactor)(nil)

// ContractTriggerXTaskManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractTriggerXTaskManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTriggerXTaskManagerFilterer implements the ContractTriggerXTaskManagerFilters interface.
var _ ContractTriggerXTaskManagerFilters = (*ContractTriggerXTaskManagerFilterer)(nil)

// ContractTriggerXTaskManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractTriggerXTaskManagerSession struct {
	Contract     *ContractTriggerXTaskManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                // Call options to use throughout this session
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ContractTriggerXTaskManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractTriggerXTaskManagerCallerSession struct {
	Contract *ContractTriggerXTaskManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                      // Call options to use throughout this session
}

// ContractTriggerXTaskManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTriggerXTaskManagerTransactorSession struct {
	Contract     *ContractTriggerXTaskManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// ContractTriggerXTaskManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractTriggerXTaskManagerRaw struct {
	Contract *ContractTriggerXTaskManager // Generic contract binding to access the raw methods on
}

// ContractTriggerXTaskManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractTriggerXTaskManagerCallerRaw struct {
	Contract *ContractTriggerXTaskManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTriggerXTaskManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTriggerXTaskManagerTransactorRaw struct {
	Contract *ContractTriggerXTaskManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractTriggerXTaskManager creates a new instance of ContractTriggerXTaskManager, bound to a specific deployed contract.
func NewContractTriggerXTaskManager(address common.Address, backend bind.ContractBackend) (*ContractTriggerXTaskManager, error) {
	contract, err := bindContractTriggerXTaskManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManager{ContractTriggerXTaskManagerCaller: ContractTriggerXTaskManagerCaller{contract: contract}, ContractTriggerXTaskManagerTransactor: ContractTriggerXTaskManagerTransactor{contract: contract}, ContractTriggerXTaskManagerFilterer: ContractTriggerXTaskManagerFilterer{contract: contract}}, nil
}

// NewContractTriggerXTaskManagerCaller creates a new read-only instance of ContractTriggerXTaskManager, bound to a specific deployed contract.
func NewContractTriggerXTaskManagerCaller(address common.Address, caller bind.ContractCaller) (*ContractTriggerXTaskManagerCaller, error) {
	contract, err := bindContractTriggerXTaskManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerCaller{contract: contract}, nil
}

// NewContractTriggerXTaskManagerTransactor creates a new write-only instance of ContractTriggerXTaskManager, bound to a specific deployed contract.
func NewContractTriggerXTaskManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTriggerXTaskManagerTransactor, error) {
	contract, err := bindContractTriggerXTaskManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerTransactor{contract: contract}, nil
}

// NewContractTriggerXTaskManagerFilterer creates a new log filterer instance of ContractTriggerXTaskManager, bound to a specific deployed contract.
func NewContractTriggerXTaskManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractTriggerXTaskManagerFilterer, error) {
	contract, err := bindContractTriggerXTaskManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerFilterer{contract: contract}, nil
}

// bindContractTriggerXTaskManager binds a generic wrapper to an already deployed contract.
func bindContractTriggerXTaskManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractTriggerXTaskManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractTriggerXTaskManager.Contract.ContractTriggerXTaskManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.ContractTriggerXTaskManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.ContractTriggerXTaskManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractTriggerXTaskManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.contract.Transact(opts, method, params...)
}

// TASKRESPONSEWINDOWBLOCK is a free data retrieval call binding the contract method 0x1ad43189.
//
// Solidity: function TASK_RESPONSE_WINDOW_BLOCK() view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) TASKRESPONSEWINDOWBLOCK(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "TASK_RESPONSE_WINDOW_BLOCK")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TASKRESPONSEWINDOWBLOCK is a free data retrieval call binding the contract method 0x1ad43189.
//
// Solidity: function TASK_RESPONSE_WINDOW_BLOCK() view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) TASKRESPONSEWINDOWBLOCK() (uint32, error) {
	return _ContractTriggerXTaskManager.Contract.TASKRESPONSEWINDOWBLOCK(&_ContractTriggerXTaskManager.CallOpts)
}

// TASKRESPONSEWINDOWBLOCK is a free data retrieval call binding the contract method 0x1ad43189.
//
// Solidity: function TASK_RESPONSE_WINDOW_BLOCK() view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) TASKRESPONSEWINDOWBLOCK() (uint32, error) {
	return _ContractTriggerXTaskManager.Contract.TASKRESPONSEWINDOWBLOCK(&_ContractTriggerXTaskManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) BlsApkRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "blsApkRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.BlsApkRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.BlsApkRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "checkSignatures", msgHash, quorumNumbers, referenceBlockNumber, params)

	if err != nil {
		return *new(IBLSSignatureCheckerQuorumStakeTotals), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSSignatureCheckerQuorumStakeTotals)).(*IBLSSignatureCheckerQuorumStakeTotals)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.CheckSignatures(&_ContractTriggerXTaskManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.CheckSignatures(&_ContractTriggerXTaskManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Delegation() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.Delegation(&_ContractTriggerXTaskManager.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) Delegation() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.Delegation(&_ContractTriggerXTaskManager.CallOpts)
}

// GenerateTaskId is a free data retrieval call binding the contract method 0x8e91269d.
//
// Solidity: function generateTaskId(uint32 jobId, uint32 taskNum) pure returns(bytes8)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) GenerateTaskId(opts *bind.CallOpts, jobId uint32, taskNum uint32) ([8]byte, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "generateTaskId", jobId, taskNum)

	if err != nil {
		return *new([8]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([8]byte)).(*[8]byte)

	return out0, err

}

// GenerateTaskId is a free data retrieval call binding the contract method 0x8e91269d.
//
// Solidity: function generateTaskId(uint32 jobId, uint32 taskNum) pure returns(bytes8)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) GenerateTaskId(jobId uint32, taskNum uint32) ([8]byte, error) {
	return _ContractTriggerXTaskManager.Contract.GenerateTaskId(&_ContractTriggerXTaskManager.CallOpts, jobId, taskNum)
}

// GenerateTaskId is a free data retrieval call binding the contract method 0x8e91269d.
//
// Solidity: function generateTaskId(uint32 jobId, uint32 taskNum) pure returns(bytes8)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) GenerateTaskId(jobId uint32, taskNum uint32) ([8]byte, error) {
	return _ContractTriggerXTaskManager.Contract.GenerateTaskId(&_ContractTriggerXTaskManager.CallOpts, jobId, taskNum)
}

// JobToTaskCounter is a free data retrieval call binding the contract method 0x9f2d70df.
//
// Solidity: function jobToTaskCounter(uint32 ) view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) JobToTaskCounter(opts *bind.CallOpts, arg0 uint32) (uint32, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "jobToTaskCounter", arg0)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// JobToTaskCounter is a free data retrieval call binding the contract method 0x9f2d70df.
//
// Solidity: function jobToTaskCounter(uint32 ) view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) JobToTaskCounter(arg0 uint32) (uint32, error) {
	return _ContractTriggerXTaskManager.Contract.JobToTaskCounter(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// JobToTaskCounter is a free data retrieval call binding the contract method 0x9f2d70df.
//
// Solidity: function jobToTaskCounter(uint32 ) view returns(uint32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) JobToTaskCounter(arg0 uint32) (uint32, error) {
	return _ContractTriggerXTaskManager.Contract.JobToTaskCounter(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Owner() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.Owner(&_ContractTriggerXTaskManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) Owner() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.Owner(&_ContractTriggerXTaskManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Paused(index uint8) (bool, error) {
	return _ContractTriggerXTaskManager.Contract.Paused(&_ContractTriggerXTaskManager.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) Paused(index uint8) (bool, error) {
	return _ContractTriggerXTaskManager.Contract.Paused(&_ContractTriggerXTaskManager.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Paused0() (*big.Int, error) {
	return _ContractTriggerXTaskManager.Contract.Paused0(&_ContractTriggerXTaskManager.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) Paused0() (*big.Int, error) {
	return _ContractTriggerXTaskManager.Contract.Paused0(&_ContractTriggerXTaskManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) PauserRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.PauserRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.PauserRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.RegistryCoordinator(&_ContractTriggerXTaskManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.RegistryCoordinator(&_ContractTriggerXTaskManager.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) ServiceManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "serviceManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) ServiceManager() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.ServiceManager(&_ContractTriggerXTaskManager.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) ServiceManager() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.ServiceManager(&_ContractTriggerXTaskManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) StakeRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.StakeRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractTriggerXTaskManager.Contract.StakeRegistry(&_ContractTriggerXTaskManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) StaleStakesForbidden(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "staleStakesForbidden")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) StaleStakesForbidden() (bool, error) {
	return _ContractTriggerXTaskManager.Contract.StaleStakesForbidden(&_ContractTriggerXTaskManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) StaleStakesForbidden() (bool, error) {
	return _ContractTriggerXTaskManager.Contract.StaleStakesForbidden(&_ContractTriggerXTaskManager.CallOpts)
}

// TaskHashes is a free data retrieval call binding the contract method 0x304feba2.
//
// Solidity: function taskHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) TaskHashes(opts *bind.CallOpts, arg0 [8]byte) ([32]byte, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "taskHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TaskHashes is a free data retrieval call binding the contract method 0x304feba2.
//
// Solidity: function taskHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) TaskHashes(arg0 [8]byte) ([32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.TaskHashes(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// TaskHashes is a free data retrieval call binding the contract method 0x304feba2.
//
// Solidity: function taskHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) TaskHashes(arg0 [8]byte) ([32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.TaskHashes(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// TaskResponseHashes is a free data retrieval call binding the contract method 0xd82c7b5c.
//
// Solidity: function taskResponseHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) TaskResponseHashes(opts *bind.CallOpts, arg0 [8]byte) ([32]byte, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "taskResponseHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// TaskResponseHashes is a free data retrieval call binding the contract method 0xd82c7b5c.
//
// Solidity: function taskResponseHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) TaskResponseHashes(arg0 [8]byte) ([32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.TaskResponseHashes(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// TaskResponseHashes is a free data retrieval call binding the contract method 0xd82c7b5c.
//
// Solidity: function taskResponseHashes(bytes8 ) view returns(bytes32)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) TaskResponseHashes(arg0 [8]byte) ([32]byte, error) {
	return _ContractTriggerXTaskManager.Contract.TaskResponseHashes(&_ContractTriggerXTaskManager.CallOpts, arg0)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCaller) TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	var out []interface{}
	err := _ContractTriggerXTaskManager.contract.Call(opts, &out, "trySignatureAndApkVerification", msgHash, apk, apkG2, sigma)

	outstruct := new(struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PairingSuccessful = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.SiganatureIsValid = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractTriggerXTaskManager.Contract.TrySignatureAndApkVerification(&_ContractTriggerXTaskManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerCallerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractTriggerXTaskManager.Contract.TrySignatureAndApkVerification(&_ContractTriggerXTaskManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// CreateNewTask is a paid mutator transaction binding the contract method 0x6566ba20.
//
// Solidity: function createNewTask(uint32 jobId, bytes quorumNumbers, uint8 quorumThreshold) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) CreateNewTask(opts *bind.TransactOpts, jobId uint32, quorumNumbers []byte, quorumThreshold uint8) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "createNewTask", jobId, quorumNumbers, quorumThreshold)
}

// CreateNewTask is a paid mutator transaction binding the contract method 0x6566ba20.
//
// Solidity: function createNewTask(uint32 jobId, bytes quorumNumbers, uint8 quorumThreshold) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) CreateNewTask(jobId uint32, quorumNumbers []byte, quorumThreshold uint8) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.CreateNewTask(&_ContractTriggerXTaskManager.TransactOpts, jobId, quorumNumbers, quorumThreshold)
}

// CreateNewTask is a paid mutator transaction binding the contract method 0x6566ba20.
//
// Solidity: function createNewTask(uint32 jobId, bytes quorumNumbers, uint8 quorumThreshold) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) CreateNewTask(jobId uint32, quorumNumbers []byte, quorumThreshold uint8) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.CreateNewTask(&_ContractTriggerXTaskManager.TransactOpts, jobId, quorumNumbers, quorumThreshold)
}

// Initialize is a paid mutator transaction binding the contract method 0xc1554a4b.
//
// Solidity: function initialize(address initialOwner, uint32 _taskResponseWindowBlock, address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address, _taskResponseWindowBlock uint32, _serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "initialize", initialOwner, _taskResponseWindowBlock, _serviceManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc1554a4b.
//
// Solidity: function initialize(address initialOwner, uint32 _taskResponseWindowBlock, address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Initialize(initialOwner common.Address, _taskResponseWindowBlock uint32, _serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Initialize(&_ContractTriggerXTaskManager.TransactOpts, initialOwner, _taskResponseWindowBlock, _serviceManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc1554a4b.
//
// Solidity: function initialize(address initialOwner, uint32 _taskResponseWindowBlock, address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) Initialize(initialOwner common.Address, _taskResponseWindowBlock uint32, _serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Initialize(&_ContractTriggerXTaskManager.TransactOpts, initialOwner, _taskResponseWindowBlock, _serviceManager)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Pause(&_ContractTriggerXTaskManager.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Pause(&_ContractTriggerXTaskManager.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) PauseAll() (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.PauseAll(&_ContractTriggerXTaskManager.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.PauseAll(&_ContractTriggerXTaskManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.RenounceOwnership(&_ContractTriggerXTaskManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.RenounceOwnership(&_ContractTriggerXTaskManager.TransactOpts)
}

// RespondToTask is a paid mutator transaction binding the contract method 0xbdf31991.
//
// Solidity: function respondToTask((uint32,uint32,uint32,bytes,uint8) task, (bytes8,bytes32) taskResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) RespondToTask(opts *bind.TransactOpts, task ITriggerXTaskManagerTask, taskResponse ITriggerXTaskManagerTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "respondToTask", task, taskResponse, nonSignerStakesAndSignature)
}

// RespondToTask is a paid mutator transaction binding the contract method 0xbdf31991.
//
// Solidity: function respondToTask((uint32,uint32,uint32,bytes,uint8) task, (bytes8,bytes32) taskResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) RespondToTask(task ITriggerXTaskManagerTask, taskResponse ITriggerXTaskManagerTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.RespondToTask(&_ContractTriggerXTaskManager.TransactOpts, task, taskResponse, nonSignerStakesAndSignature)
}

// RespondToTask is a paid mutator transaction binding the contract method 0xbdf31991.
//
// Solidity: function respondToTask((uint32,uint32,uint32,bytes,uint8) task, (bytes8,bytes32) taskResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) RespondToTask(task ITriggerXTaskManagerTask, taskResponse ITriggerXTaskManagerTaskResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.RespondToTask(&_ContractTriggerXTaskManager.TransactOpts, task, taskResponse, nonSignerStakesAndSignature)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) SetStaleStakesForbidden(opts *bind.TransactOpts, value bool) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "setStaleStakesForbidden", value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.SetStaleStakesForbidden(&_ContractTriggerXTaskManager.TransactOpts, value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.SetStaleStakesForbidden(&_ContractTriggerXTaskManager.TransactOpts, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.TransferOwnership(&_ContractTriggerXTaskManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.TransferOwnership(&_ContractTriggerXTaskManager.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Unpause(&_ContractTriggerXTaskManager.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.Unpause(&_ContractTriggerXTaskManager.TransactOpts, newPausedStatus)
}

// UpdateServiceManager is a paid mutator transaction binding the contract method 0x7d847d1b.
//
// Solidity: function updateServiceManager(address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactor) UpdateServiceManager(opts *bind.TransactOpts, _serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.contract.Transact(opts, "updateServiceManager", _serviceManager)
}

// UpdateServiceManager is a paid mutator transaction binding the contract method 0x7d847d1b.
//
// Solidity: function updateServiceManager(address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerSession) UpdateServiceManager(_serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.UpdateServiceManager(&_ContractTriggerXTaskManager.TransactOpts, _serviceManager)
}

// UpdateServiceManager is a paid mutator transaction binding the contract method 0x7d847d1b.
//
// Solidity: function updateServiceManager(address _serviceManager) returns()
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerTransactorSession) UpdateServiceManager(_serviceManager common.Address) (*types.Transaction, error) {
	return _ContractTriggerXTaskManager.Contract.UpdateServiceManager(&_ContractTriggerXTaskManager.TransactOpts, _serviceManager)
}

// ContractTriggerXTaskManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerInitializedIterator struct {
	Event *ContractTriggerXTaskManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerInitialized represents a Initialized event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerInitializedIterator, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerInitializedIterator{contract: _ContractTriggerXTaskManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerInitialized)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseInitialized(log types.Log) (*ContractTriggerXTaskManagerInitialized, error) {
	event := new(ContractTriggerXTaskManagerInitialized)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerOwnershipTransferredIterator struct {
	Event *ContractTriggerXTaskManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractTriggerXTaskManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerOwnershipTransferredIterator{contract: _ContractTriggerXTaskManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerOwnershipTransferred)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ContractTriggerXTaskManagerOwnershipTransferred, error) {
	event := new(ContractTriggerXTaskManagerOwnershipTransferred)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerPausedIterator struct {
	Event *ContractTriggerXTaskManagerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerPaused represents a Paused event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractTriggerXTaskManagerPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerPausedIterator{contract: _ContractTriggerXTaskManager.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerPaused)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParsePaused(log types.Log) (*ContractTriggerXTaskManagerPaused, error) {
	event := new(ContractTriggerXTaskManagerPaused)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator is returned from FilterStaleStakesForbiddenUpdate and is used to iterate over the raw logs and unpacked data for StaleStakesForbiddenUpdate events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator struct {
	Event *ContractTriggerXTaskManagerStaleStakesForbiddenUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerStaleStakesForbiddenUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerStaleStakesForbiddenUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerStaleStakesForbiddenUpdate represents a StaleStakesForbiddenUpdate event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerStaleStakesForbiddenUpdate struct {
	Value bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStaleStakesForbiddenUpdate is a free log retrieval operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterStaleStakesForbiddenUpdate(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerStaleStakesForbiddenUpdateIterator{contract: _ContractTriggerXTaskManager.contract, event: "StaleStakesForbiddenUpdate", logs: logs, sub: sub}, nil
}

// WatchStaleStakesForbiddenUpdate is a free log subscription operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchStaleStakesForbiddenUpdate(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerStaleStakesForbiddenUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerStaleStakesForbiddenUpdate)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaleStakesForbiddenUpdate is a log parse operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseStaleStakesForbiddenUpdate(log types.Log) (*ContractTriggerXTaskManagerStaleStakesForbiddenUpdate, error) {
	event := new(ContractTriggerXTaskManagerStaleStakesForbiddenUpdate)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerTaskCreatedIterator is returned from FilterTaskCreated and is used to iterate over the raw logs and unpacked data for TaskCreated events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerTaskCreatedIterator struct {
	Event *ContractTriggerXTaskManagerTaskCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerTaskCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerTaskCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerTaskCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerTaskCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerTaskCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerTaskCreated represents a TaskCreated event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerTaskCreated struct {
	TaskId   [8]byte
	TaskHash [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTaskCreated is a free log retrieval operation binding the contract event 0xabfb3a7c31b577bfadcbc582547c97e20e11cb2223dd8617bf0e283607cad8ad.
//
// Solidity: event TaskCreated(bytes8 taskId, bytes32 taskHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterTaskCreated(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerTaskCreatedIterator, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "TaskCreated")
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerTaskCreatedIterator{contract: _ContractTriggerXTaskManager.contract, event: "TaskCreated", logs: logs, sub: sub}, nil
}

// WatchTaskCreated is a free log subscription operation binding the contract event 0xabfb3a7c31b577bfadcbc582547c97e20e11cb2223dd8617bf0e283607cad8ad.
//
// Solidity: event TaskCreated(bytes8 taskId, bytes32 taskHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchTaskCreated(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerTaskCreated) (event.Subscription, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "TaskCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerTaskCreated)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "TaskCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskCreated is a log parse operation binding the contract event 0xabfb3a7c31b577bfadcbc582547c97e20e11cb2223dd8617bf0e283607cad8ad.
//
// Solidity: event TaskCreated(bytes8 taskId, bytes32 taskHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseTaskCreated(log types.Log) (*ContractTriggerXTaskManagerTaskCreated, error) {
	event := new(ContractTriggerXTaskManagerTaskCreated)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "TaskCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerTaskRespondedIterator is returned from FilterTaskResponded and is used to iterate over the raw logs and unpacked data for TaskResponded events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerTaskRespondedIterator struct {
	Event *ContractTriggerXTaskManagerTaskResponded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerTaskRespondedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerTaskResponded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerTaskResponded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerTaskRespondedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerTaskRespondedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerTaskResponded represents a TaskResponded event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerTaskResponded struct {
	TaskId           [8]byte
	TaskResponseHash [32]byte
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterTaskResponded is a free log retrieval operation binding the contract event 0x1d628bde448f73744b15323b0741929628bf470841cbcff2e6589437eb1dde3f.
//
// Solidity: event TaskResponded(bytes8 taskId, bytes32 taskResponseHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterTaskResponded(opts *bind.FilterOpts) (*ContractTriggerXTaskManagerTaskRespondedIterator, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "TaskResponded")
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerTaskRespondedIterator{contract: _ContractTriggerXTaskManager.contract, event: "TaskResponded", logs: logs, sub: sub}, nil
}

// WatchTaskResponded is a free log subscription operation binding the contract event 0x1d628bde448f73744b15323b0741929628bf470841cbcff2e6589437eb1dde3f.
//
// Solidity: event TaskResponded(bytes8 taskId, bytes32 taskResponseHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchTaskResponded(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerTaskResponded) (event.Subscription, error) {

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "TaskResponded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerTaskResponded)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "TaskResponded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTaskResponded is a log parse operation binding the contract event 0x1d628bde448f73744b15323b0741929628bf470841cbcff2e6589437eb1dde3f.
//
// Solidity: event TaskResponded(bytes8 taskId, bytes32 taskResponseHash)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseTaskResponded(log types.Log) (*ContractTriggerXTaskManagerTaskResponded, error) {
	event := new(ContractTriggerXTaskManagerTaskResponded)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "TaskResponded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTriggerXTaskManagerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerUnpausedIterator struct {
	Event *ContractTriggerXTaskManagerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTriggerXTaskManagerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTriggerXTaskManagerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTriggerXTaskManagerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTriggerXTaskManagerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTriggerXTaskManagerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTriggerXTaskManagerUnpaused represents a Unpaused event raised by the ContractTriggerXTaskManager contract.
type ContractTriggerXTaskManagerUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractTriggerXTaskManagerUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractTriggerXTaskManagerUnpausedIterator{contract: _ContractTriggerXTaskManager.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractTriggerXTaskManagerUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractTriggerXTaskManager.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTriggerXTaskManagerUnpaused)
				if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractTriggerXTaskManager *ContractTriggerXTaskManagerFilterer) ParseUnpaused(log types.Log) (*ContractTriggerXTaskManagerUnpaused, error) {
	event := new(ContractTriggerXTaskManagerUnpaused)
	if err := _ContractTriggerXTaskManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
